//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5485
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace com.digitalwave.iCare.gui.LIS.Report {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsSamplesCheckTotal")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsSamplesCheckTotal : global::System.Data.DataSet {
        
        private dtbSamplesCheckTotalDataTable tabledtbSamplesCheckTotal;
        
        private GermOccurRateDataTable tableGermOccurRate;
        
        private GermDistributeTrendDataTable tableGermDistributeTrend;
        
        private AnimalculeCheckTotalDataTable tableAnimalculeCheckTotal;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsSamplesCheckTotal() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsSamplesCheckTotal(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtbSamplesCheckTotal"] != null)) {
                    base.Tables.Add(new dtbSamplesCheckTotalDataTable(ds.Tables["dtbSamplesCheckTotal"]));
                }
                if ((ds.Tables["GermOccurRate"] != null)) {
                    base.Tables.Add(new GermOccurRateDataTable(ds.Tables["GermOccurRate"]));
                }
                if ((ds.Tables["GermDistributeTrend"] != null)) {
                    base.Tables.Add(new GermDistributeTrendDataTable(ds.Tables["GermDistributeTrend"]));
                }
                if ((ds.Tables["AnimalculeCheckTotal"] != null)) {
                    base.Tables.Add(new AnimalculeCheckTotalDataTable(ds.Tables["AnimalculeCheckTotal"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtbSamplesCheckTotalDataTable dtbSamplesCheckTotal {
            get {
                return this.tabledtbSamplesCheckTotal;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GermOccurRateDataTable GermOccurRate {
            get {
                return this.tableGermOccurRate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GermDistributeTrendDataTable GermDistributeTrend {
            get {
                return this.tableGermDistributeTrend;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AnimalculeCheckTotalDataTable AnimalculeCheckTotal {
            get {
                return this.tableAnimalculeCheckTotal;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsSamplesCheckTotal cln = ((dsSamplesCheckTotal)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dtbSamplesCheckTotal"] != null)) {
                    base.Tables.Add(new dtbSamplesCheckTotalDataTable(ds.Tables["dtbSamplesCheckTotal"]));
                }
                if ((ds.Tables["GermOccurRate"] != null)) {
                    base.Tables.Add(new GermOccurRateDataTable(ds.Tables["GermOccurRate"]));
                }
                if ((ds.Tables["GermDistributeTrend"] != null)) {
                    base.Tables.Add(new GermDistributeTrendDataTable(ds.Tables["GermDistributeTrend"]));
                }
                if ((ds.Tables["AnimalculeCheckTotal"] != null)) {
                    base.Tables.Add(new AnimalculeCheckTotalDataTable(ds.Tables["AnimalculeCheckTotal"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledtbSamplesCheckTotal = ((dtbSamplesCheckTotalDataTable)(base.Tables["dtbSamplesCheckTotal"]));
            if ((initTable == true)) {
                if ((this.tabledtbSamplesCheckTotal != null)) {
                    this.tabledtbSamplesCheckTotal.InitVars();
                }
            }
            this.tableGermOccurRate = ((GermOccurRateDataTable)(base.Tables["GermOccurRate"]));
            if ((initTable == true)) {
                if ((this.tableGermOccurRate != null)) {
                    this.tableGermOccurRate.InitVars();
                }
            }
            this.tableGermDistributeTrend = ((GermDistributeTrendDataTable)(base.Tables["GermDistributeTrend"]));
            if ((initTable == true)) {
                if ((this.tableGermDistributeTrend != null)) {
                    this.tableGermDistributeTrend.InitVars();
                }
            }
            this.tableAnimalculeCheckTotal = ((AnimalculeCheckTotalDataTable)(base.Tables["AnimalculeCheckTotal"]));
            if ((initTable == true)) {
                if ((this.tableAnimalculeCheckTotal != null)) {
                    this.tableAnimalculeCheckTotal.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsSamplesCheckTotal";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsSamplesCheckTotal.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledtbSamplesCheckTotal = new dtbSamplesCheckTotalDataTable();
            base.Tables.Add(this.tabledtbSamplesCheckTotal);
            this.tableGermOccurRate = new GermOccurRateDataTable();
            base.Tables.Add(this.tableGermOccurRate);
            this.tableGermDistributeTrend = new GermDistributeTrendDataTable();
            base.Tables.Add(this.tableGermDistributeTrend);
            this.tableAnimalculeCheckTotal = new AnimalculeCheckTotalDataTable();
            base.Tables.Add(this.tableAnimalculeCheckTotal);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtbSamplesCheckTotal() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGermOccurRate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGermDistributeTrend() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAnimalculeCheckTotal() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsSamplesCheckTotal ds = new dsSamplesCheckTotal();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dtbSamplesCheckTotalRowChangeEventHandler(object sender, dtbSamplesCheckTotalRowChangeEvent e);
        
        public delegate void GermOccurRateRowChangeEventHandler(object sender, GermOccurRateRowChangeEvent e);
        
        public delegate void GermDistributeTrendRowChangeEventHandler(object sender, GermDistributeTrendRowChangeEvent e);
        
        public delegate void AnimalculeCheckTotalRowChangeEventHandler(object sender, AnimalculeCheckTotalRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtbSamplesCheckTotalDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDEPTNAME;
            
            private global::System.Data.DataColumn columnSAMPLETYPE;
            
            private global::System.Data.DataColumn columnSAMPLETYPENUM;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtbSamplesCheckTotalDataTable() {
                this.TableName = "dtbSamplesCheckTotal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtbSamplesCheckTotalDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtbSamplesCheckTotalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEPTNAMEColumn {
                get {
                    return this.columnDEPTNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SAMPLETYPEColumn {
                get {
                    return this.columnSAMPLETYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SAMPLETYPENUMColumn {
                get {
                    return this.columnSAMPLETYPENUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtbSamplesCheckTotalRow this[int index] {
                get {
                    return ((dtbSamplesCheckTotalRow)(this.Rows[index]));
                }
            }
            
            public event dtbSamplesCheckTotalRowChangeEventHandler dtbSamplesCheckTotalRowChanging;
            
            public event dtbSamplesCheckTotalRowChangeEventHandler dtbSamplesCheckTotalRowChanged;
            
            public event dtbSamplesCheckTotalRowChangeEventHandler dtbSamplesCheckTotalRowDeleting;
            
            public event dtbSamplesCheckTotalRowChangeEventHandler dtbSamplesCheckTotalRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtbSamplesCheckTotalRow(dtbSamplesCheckTotalRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtbSamplesCheckTotalRow AdddtbSamplesCheckTotalRow(string DEPTNAME, string SAMPLETYPE, int SAMPLETYPENUM) {
                dtbSamplesCheckTotalRow rowdtbSamplesCheckTotalRow = ((dtbSamplesCheckTotalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DEPTNAME,
                        SAMPLETYPE,
                        SAMPLETYPENUM};
                rowdtbSamplesCheckTotalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtbSamplesCheckTotalRow);
                return rowdtbSamplesCheckTotalRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtbSamplesCheckTotalDataTable cln = ((dtbSamplesCheckTotalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtbSamplesCheckTotalDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDEPTNAME = base.Columns["DEPTNAME"];
                this.columnSAMPLETYPE = base.Columns["SAMPLETYPE"];
                this.columnSAMPLETYPENUM = base.Columns["SAMPLETYPENUM"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDEPTNAME = new global::System.Data.DataColumn("DEPTNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEPTNAME);
                this.columnSAMPLETYPE = new global::System.Data.DataColumn("SAMPLETYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAMPLETYPE);
                this.columnSAMPLETYPENUM = new global::System.Data.DataColumn("SAMPLETYPENUM", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAMPLETYPENUM);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtbSamplesCheckTotalRow NewdtbSamplesCheckTotalRow() {
                return ((dtbSamplesCheckTotalRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtbSamplesCheckTotalRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtbSamplesCheckTotalRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtbSamplesCheckTotalRowChanged != null)) {
                    this.dtbSamplesCheckTotalRowChanged(this, new dtbSamplesCheckTotalRowChangeEvent(((dtbSamplesCheckTotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtbSamplesCheckTotalRowChanging != null)) {
                    this.dtbSamplesCheckTotalRowChanging(this, new dtbSamplesCheckTotalRowChangeEvent(((dtbSamplesCheckTotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtbSamplesCheckTotalRowDeleted != null)) {
                    this.dtbSamplesCheckTotalRowDeleted(this, new dtbSamplesCheckTotalRowChangeEvent(((dtbSamplesCheckTotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtbSamplesCheckTotalRowDeleting != null)) {
                    this.dtbSamplesCheckTotalRowDeleting(this, new dtbSamplesCheckTotalRowChangeEvent(((dtbSamplesCheckTotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtbSamplesCheckTotalRow(dtbSamplesCheckTotalRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSamplesCheckTotal ds = new dsSamplesCheckTotal();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtbSamplesCheckTotalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GermOccurRateDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnGermName;
            
            private global::System.Data.DataColumn columnGermNum;
            
            private global::System.Data.DataColumn columnRATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GermOccurRateDataTable() {
                this.TableName = "GermOccurRate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GermOccurRateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GermOccurRateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GermNameColumn {
                get {
                    return this.columnGermName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GermNumColumn {
                get {
                    return this.columnGermNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RATEColumn {
                get {
                    return this.columnRATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GermOccurRateRow this[int index] {
                get {
                    return ((GermOccurRateRow)(this.Rows[index]));
                }
            }
            
            public event GermOccurRateRowChangeEventHandler GermOccurRateRowChanging;
            
            public event GermOccurRateRowChangeEventHandler GermOccurRateRowChanged;
            
            public event GermOccurRateRowChangeEventHandler GermOccurRateRowDeleting;
            
            public event GermOccurRateRowChangeEventHandler GermOccurRateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGermOccurRateRow(GermOccurRateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GermOccurRateRow AddGermOccurRateRow(string GermName, int GermNum, double RATE) {
                GermOccurRateRow rowGermOccurRateRow = ((GermOccurRateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GermName,
                        GermNum,
                        RATE};
                rowGermOccurRateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGermOccurRateRow);
                return rowGermOccurRateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GermOccurRateDataTable cln = ((GermOccurRateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GermOccurRateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGermName = base.Columns["GermName"];
                this.columnGermNum = base.Columns["GermNum"];
                this.columnRATE = base.Columns["RATE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGermName = new global::System.Data.DataColumn("GermName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGermName);
                this.columnGermNum = new global::System.Data.DataColumn("GermNum", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGermNum);
                this.columnRATE = new global::System.Data.DataColumn("RATE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRATE);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GermOccurRateRow NewGermOccurRateRow() {
                return ((GermOccurRateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GermOccurRateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GermOccurRateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GermOccurRateRowChanged != null)) {
                    this.GermOccurRateRowChanged(this, new GermOccurRateRowChangeEvent(((GermOccurRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GermOccurRateRowChanging != null)) {
                    this.GermOccurRateRowChanging(this, new GermOccurRateRowChangeEvent(((GermOccurRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GermOccurRateRowDeleted != null)) {
                    this.GermOccurRateRowDeleted(this, new GermOccurRateRowChangeEvent(((GermOccurRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GermOccurRateRowDeleting != null)) {
                    this.GermOccurRateRowDeleting(this, new GermOccurRateRowChangeEvent(((GermOccurRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGermOccurRateRow(GermOccurRateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSamplesCheckTotal ds = new dsSamplesCheckTotal();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GermOccurRateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GermDistributeTrendDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnGermName;
            
            private global::System.Data.DataColumn columnGermNum;
            
            private global::System.Data.DataColumn columnYearMonth;
            
            private global::System.Data.DataColumn columnResultType;
            
            private global::System.Data.DataColumn columnGermTotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GermDistributeTrendDataTable() {
                this.TableName = "GermDistributeTrend";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GermDistributeTrendDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GermDistributeTrendDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GermNameColumn {
                get {
                    return this.columnGermName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GermNumColumn {
                get {
                    return this.columnGermNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearMonthColumn {
                get {
                    return this.columnYearMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResultTypeColumn {
                get {
                    return this.columnResultType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GermTotalColumn {
                get {
                    return this.columnGermTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GermDistributeTrendRow this[int index] {
                get {
                    return ((GermDistributeTrendRow)(this.Rows[index]));
                }
            }
            
            public event GermDistributeTrendRowChangeEventHandler GermDistributeTrendRowChanging;
            
            public event GermDistributeTrendRowChangeEventHandler GermDistributeTrendRowChanged;
            
            public event GermDistributeTrendRowChangeEventHandler GermDistributeTrendRowDeleting;
            
            public event GermDistributeTrendRowChangeEventHandler GermDistributeTrendRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGermDistributeTrendRow(GermDistributeTrendRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GermDistributeTrendRow AddGermDistributeTrendRow(string GermName, double GermNum, System.DateTime YearMonth, string ResultType, int GermTotal) {
                GermDistributeTrendRow rowGermDistributeTrendRow = ((GermDistributeTrendRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GermName,
                        GermNum,
                        YearMonth,
                        ResultType,
                        GermTotal};
                rowGermDistributeTrendRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGermDistributeTrendRow);
                return rowGermDistributeTrendRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GermDistributeTrendDataTable cln = ((GermDistributeTrendDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GermDistributeTrendDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGermName = base.Columns["GermName"];
                this.columnGermNum = base.Columns["GermNum"];
                this.columnYearMonth = base.Columns["YearMonth"];
                this.columnResultType = base.Columns["ResultType"];
                this.columnGermTotal = base.Columns["GermTotal"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGermName = new global::System.Data.DataColumn("GermName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGermName);
                this.columnGermNum = new global::System.Data.DataColumn("GermNum", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGermNum);
                this.columnYearMonth = new global::System.Data.DataColumn("YearMonth", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYearMonth);
                this.columnResultType = new global::System.Data.DataColumn("ResultType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResultType);
                this.columnGermTotal = new global::System.Data.DataColumn("GermTotal", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGermTotal);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GermDistributeTrendRow NewGermDistributeTrendRow() {
                return ((GermDistributeTrendRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GermDistributeTrendRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GermDistributeTrendRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GermDistributeTrendRowChanged != null)) {
                    this.GermDistributeTrendRowChanged(this, new GermDistributeTrendRowChangeEvent(((GermDistributeTrendRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GermDistributeTrendRowChanging != null)) {
                    this.GermDistributeTrendRowChanging(this, new GermDistributeTrendRowChangeEvent(((GermDistributeTrendRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GermDistributeTrendRowDeleted != null)) {
                    this.GermDistributeTrendRowDeleted(this, new GermDistributeTrendRowChangeEvent(((GermDistributeTrendRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GermDistributeTrendRowDeleting != null)) {
                    this.GermDistributeTrendRowDeleting(this, new GermDistributeTrendRowChangeEvent(((GermDistributeTrendRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGermDistributeTrendRow(GermDistributeTrendRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSamplesCheckTotal ds = new dsSamplesCheckTotal();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GermDistributeTrendDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AnimalculeCheckTotalDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSampleId;
            
            private global::System.Data.DataColumn columnSampleType;
            
            private global::System.Data.DataColumn columnDept;
            
            private global::System.Data.DataColumn columnPatientName;
            
            private global::System.Data.DataColumn columnPatientSex;
            
            private global::System.Data.DataColumn columnPatientArea;
            
            private global::System.Data.DataColumn columnBedNo;
            
            private global::System.Data.DataColumn columnSendCheckSample;
            
            private global::System.Data.DataColumn columnDoctorName;
            
            private global::System.Data.DataColumn columnReportTime;
            
            private global::System.Data.DataColumn columnCheckResult;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalculeCheckTotalDataTable() {
                this.TableName = "AnimalculeCheckTotal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnimalculeCheckTotalDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AnimalculeCheckTotalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SampleIdColumn {
                get {
                    return this.columnSampleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SampleTypeColumn {
                get {
                    return this.columnSampleType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeptColumn {
                get {
                    return this.columnDept;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatientNameColumn {
                get {
                    return this.columnPatientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatientSexColumn {
                get {
                    return this.columnPatientSex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatientAreaColumn {
                get {
                    return this.columnPatientArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BedNoColumn {
                get {
                    return this.columnBedNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendCheckSampleColumn {
                get {
                    return this.columnSendCheckSample;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DoctorNameColumn {
                get {
                    return this.columnDoctorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportTimeColumn {
                get {
                    return this.columnReportTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckResultColumn {
                get {
                    return this.columnCheckResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalculeCheckTotalRow this[int index] {
                get {
                    return ((AnimalculeCheckTotalRow)(this.Rows[index]));
                }
            }
            
            public event AnimalculeCheckTotalRowChangeEventHandler AnimalculeCheckTotalRowChanging;
            
            public event AnimalculeCheckTotalRowChangeEventHandler AnimalculeCheckTotalRowChanged;
            
            public event AnimalculeCheckTotalRowChangeEventHandler AnimalculeCheckTotalRowDeleting;
            
            public event AnimalculeCheckTotalRowChangeEventHandler AnimalculeCheckTotalRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAnimalculeCheckTotalRow(AnimalculeCheckTotalRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalculeCheckTotalRow AddAnimalculeCheckTotalRow(string SampleId, string SampleType, string Dept, string PatientName, string PatientSex, string PatientArea, string BedNo, string SendCheckSample, string DoctorName, string ReportTime, string CheckResult) {
                AnimalculeCheckTotalRow rowAnimalculeCheckTotalRow = ((AnimalculeCheckTotalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SampleId,
                        SampleType,
                        Dept,
                        PatientName,
                        PatientSex,
                        PatientArea,
                        BedNo,
                        SendCheckSample,
                        DoctorName,
                        ReportTime,
                        CheckResult};
                rowAnimalculeCheckTotalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAnimalculeCheckTotalRow);
                return rowAnimalculeCheckTotalRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AnimalculeCheckTotalDataTable cln = ((AnimalculeCheckTotalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AnimalculeCheckTotalDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSampleId = base.Columns["SampleId"];
                this.columnSampleType = base.Columns["SampleType"];
                this.columnDept = base.Columns["Dept"];
                this.columnPatientName = base.Columns["PatientName"];
                this.columnPatientSex = base.Columns["PatientSex"];
                this.columnPatientArea = base.Columns["PatientArea"];
                this.columnBedNo = base.Columns["BedNo"];
                this.columnSendCheckSample = base.Columns["SendCheckSample"];
                this.columnDoctorName = base.Columns["DoctorName"];
                this.columnReportTime = base.Columns["ReportTime"];
                this.columnCheckResult = base.Columns["CheckResult"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSampleId = new global::System.Data.DataColumn("SampleId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleId);
                this.columnSampleType = new global::System.Data.DataColumn("SampleType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleType);
                this.columnDept = new global::System.Data.DataColumn("Dept", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDept);
                this.columnPatientName = new global::System.Data.DataColumn("PatientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientName);
                this.columnPatientSex = new global::System.Data.DataColumn("PatientSex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientSex);
                this.columnPatientArea = new global::System.Data.DataColumn("PatientArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientArea);
                this.columnBedNo = new global::System.Data.DataColumn("BedNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBedNo);
                this.columnSendCheckSample = new global::System.Data.DataColumn("SendCheckSample", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendCheckSample);
                this.columnDoctorName = new global::System.Data.DataColumn("DoctorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDoctorName);
                this.columnReportTime = new global::System.Data.DataColumn("ReportTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportTime);
                this.columnCheckResult = new global::System.Data.DataColumn("CheckResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckResult);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalculeCheckTotalRow NewAnimalculeCheckTotalRow() {
                return ((AnimalculeCheckTotalRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AnimalculeCheckTotalRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AnimalculeCheckTotalRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AnimalculeCheckTotalRowChanged != null)) {
                    this.AnimalculeCheckTotalRowChanged(this, new AnimalculeCheckTotalRowChangeEvent(((AnimalculeCheckTotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AnimalculeCheckTotalRowChanging != null)) {
                    this.AnimalculeCheckTotalRowChanging(this, new AnimalculeCheckTotalRowChangeEvent(((AnimalculeCheckTotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AnimalculeCheckTotalRowDeleted != null)) {
                    this.AnimalculeCheckTotalRowDeleted(this, new AnimalculeCheckTotalRowChangeEvent(((AnimalculeCheckTotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AnimalculeCheckTotalRowDeleting != null)) {
                    this.AnimalculeCheckTotalRowDeleting(this, new AnimalculeCheckTotalRowChangeEvent(((AnimalculeCheckTotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAnimalculeCheckTotalRow(AnimalculeCheckTotalRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSamplesCheckTotal ds = new dsSamplesCheckTotal();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AnimalculeCheckTotalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtbSamplesCheckTotalRow : global::System.Data.DataRow {
            
            private dtbSamplesCheckTotalDataTable tabledtbSamplesCheckTotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtbSamplesCheckTotalRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtbSamplesCheckTotal = ((dtbSamplesCheckTotalDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEPTNAME {
                get {
                    try {
                        return ((string)(this[this.tabledtbSamplesCheckTotal.DEPTNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“dtbSamplesCheckTotal”中列“DEPTNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtbSamplesCheckTotal.DEPTNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SAMPLETYPE {
                get {
                    try {
                        return ((string)(this[this.tabledtbSamplesCheckTotal.SAMPLETYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“dtbSamplesCheckTotal”中列“SAMPLETYPE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtbSamplesCheckTotal.SAMPLETYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SAMPLETYPENUM {
                get {
                    try {
                        return ((int)(this[this.tabledtbSamplesCheckTotal.SAMPLETYPENUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“dtbSamplesCheckTotal”中列“SAMPLETYPENUM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtbSamplesCheckTotal.SAMPLETYPENUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEPTNAMENull() {
                return this.IsNull(this.tabledtbSamplesCheckTotal.DEPTNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEPTNAMENull() {
                this[this.tabledtbSamplesCheckTotal.DEPTNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSAMPLETYPENull() {
                return this.IsNull(this.tabledtbSamplesCheckTotal.SAMPLETYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSAMPLETYPENull() {
                this[this.tabledtbSamplesCheckTotal.SAMPLETYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSAMPLETYPENUMNull() {
                return this.IsNull(this.tabledtbSamplesCheckTotal.SAMPLETYPENUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSAMPLETYPENUMNull() {
                this[this.tabledtbSamplesCheckTotal.SAMPLETYPENUMColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GermOccurRateRow : global::System.Data.DataRow {
            
            private GermOccurRateDataTable tableGermOccurRate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GermOccurRateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGermOccurRate = ((GermOccurRateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GermName {
                get {
                    try {
                        return ((string)(this[this.tableGermOccurRate.GermNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“GermOccurRate”中列“GermName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableGermOccurRate.GermNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GermNum {
                get {
                    try {
                        return ((int)(this[this.tableGermOccurRate.GermNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“GermOccurRate”中列“GermNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableGermOccurRate.GermNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RATE {
                get {
                    try {
                        return ((double)(this[this.tableGermOccurRate.RATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“GermOccurRate”中列“RATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableGermOccurRate.RATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGermNameNull() {
                return this.IsNull(this.tableGermOccurRate.GermNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGermNameNull() {
                this[this.tableGermOccurRate.GermNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGermNumNull() {
                return this.IsNull(this.tableGermOccurRate.GermNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGermNumNull() {
                this[this.tableGermOccurRate.GermNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRATENull() {
                return this.IsNull(this.tableGermOccurRate.RATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRATENull() {
                this[this.tableGermOccurRate.RATEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GermDistributeTrendRow : global::System.Data.DataRow {
            
            private GermDistributeTrendDataTable tableGermDistributeTrend;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GermDistributeTrendRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGermDistributeTrend = ((GermDistributeTrendDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GermName {
                get {
                    try {
                        return ((string)(this[this.tableGermDistributeTrend.GermNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“GermDistributeTrend”中列“GermName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableGermDistributeTrend.GermNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double GermNum {
                get {
                    try {
                        return ((double)(this[this.tableGermDistributeTrend.GermNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“GermDistributeTrend”中列“GermNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableGermDistributeTrend.GermNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime YearMonth {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGermDistributeTrend.YearMonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“GermDistributeTrend”中列“YearMonth”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableGermDistributeTrend.YearMonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResultType {
                get {
                    try {
                        return ((string)(this[this.tableGermDistributeTrend.ResultTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“GermDistributeTrend”中列“ResultType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableGermDistributeTrend.ResultTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GermTotal {
                get {
                    try {
                        return ((int)(this[this.tableGermDistributeTrend.GermTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“GermDistributeTrend”中列“GermTotal”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableGermDistributeTrend.GermTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGermNameNull() {
                return this.IsNull(this.tableGermDistributeTrend.GermNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGermNameNull() {
                this[this.tableGermDistributeTrend.GermNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGermNumNull() {
                return this.IsNull(this.tableGermDistributeTrend.GermNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGermNumNull() {
                this[this.tableGermDistributeTrend.GermNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearMonthNull() {
                return this.IsNull(this.tableGermDistributeTrend.YearMonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearMonthNull() {
                this[this.tableGermDistributeTrend.YearMonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResultTypeNull() {
                return this.IsNull(this.tableGermDistributeTrend.ResultTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResultTypeNull() {
                this[this.tableGermDistributeTrend.ResultTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGermTotalNull() {
                return this.IsNull(this.tableGermDistributeTrend.GermTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGermTotalNull() {
                this[this.tableGermDistributeTrend.GermTotalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AnimalculeCheckTotalRow : global::System.Data.DataRow {
            
            private AnimalculeCheckTotalDataTable tableAnimalculeCheckTotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnimalculeCheckTotalRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAnimalculeCheckTotal = ((AnimalculeCheckTotalDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SampleId {
                get {
                    try {
                        return ((string)(this[this.tableAnimalculeCheckTotal.SampleIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AnimalculeCheckTotal”中列“SampleId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAnimalculeCheckTotal.SampleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SampleType {
                get {
                    try {
                        return ((string)(this[this.tableAnimalculeCheckTotal.SampleTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AnimalculeCheckTotal”中列“SampleType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAnimalculeCheckTotal.SampleTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Dept {
                get {
                    try {
                        return ((string)(this[this.tableAnimalculeCheckTotal.DeptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AnimalculeCheckTotal”中列“Dept”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAnimalculeCheckTotal.DeptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PatientName {
                get {
                    try {
                        return ((string)(this[this.tableAnimalculeCheckTotal.PatientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AnimalculeCheckTotal”中列“PatientName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAnimalculeCheckTotal.PatientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PatientSex {
                get {
                    try {
                        return ((string)(this[this.tableAnimalculeCheckTotal.PatientSexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AnimalculeCheckTotal”中列“PatientSex”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAnimalculeCheckTotal.PatientSexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PatientArea {
                get {
                    try {
                        return ((string)(this[this.tableAnimalculeCheckTotal.PatientAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AnimalculeCheckTotal”中列“PatientArea”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAnimalculeCheckTotal.PatientAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BedNo {
                get {
                    try {
                        return ((string)(this[this.tableAnimalculeCheckTotal.BedNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AnimalculeCheckTotal”中列“BedNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAnimalculeCheckTotal.BedNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SendCheckSample {
                get {
                    try {
                        return ((string)(this[this.tableAnimalculeCheckTotal.SendCheckSampleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AnimalculeCheckTotal”中列“SendCheckSample”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAnimalculeCheckTotal.SendCheckSampleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DoctorName {
                get {
                    try {
                        return ((string)(this[this.tableAnimalculeCheckTotal.DoctorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AnimalculeCheckTotal”中列“DoctorName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAnimalculeCheckTotal.DoctorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportTime {
                get {
                    try {
                        return ((string)(this[this.tableAnimalculeCheckTotal.ReportTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AnimalculeCheckTotal”中列“ReportTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAnimalculeCheckTotal.ReportTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckResult {
                get {
                    try {
                        return ((string)(this[this.tableAnimalculeCheckTotal.CheckResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“AnimalculeCheckTotal”中列“CheckResult”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAnimalculeCheckTotal.CheckResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSampleIdNull() {
                return this.IsNull(this.tableAnimalculeCheckTotal.SampleIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSampleIdNull() {
                this[this.tableAnimalculeCheckTotal.SampleIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSampleTypeNull() {
                return this.IsNull(this.tableAnimalculeCheckTotal.SampleTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSampleTypeNull() {
                this[this.tableAnimalculeCheckTotal.SampleTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeptNull() {
                return this.IsNull(this.tableAnimalculeCheckTotal.DeptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeptNull() {
                this[this.tableAnimalculeCheckTotal.DeptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatientNameNull() {
                return this.IsNull(this.tableAnimalculeCheckTotal.PatientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatientNameNull() {
                this[this.tableAnimalculeCheckTotal.PatientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatientSexNull() {
                return this.IsNull(this.tableAnimalculeCheckTotal.PatientSexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatientSexNull() {
                this[this.tableAnimalculeCheckTotal.PatientSexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatientAreaNull() {
                return this.IsNull(this.tableAnimalculeCheckTotal.PatientAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatientAreaNull() {
                this[this.tableAnimalculeCheckTotal.PatientAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBedNoNull() {
                return this.IsNull(this.tableAnimalculeCheckTotal.BedNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBedNoNull() {
                this[this.tableAnimalculeCheckTotal.BedNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSendCheckSampleNull() {
                return this.IsNull(this.tableAnimalculeCheckTotal.SendCheckSampleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSendCheckSampleNull() {
                this[this.tableAnimalculeCheckTotal.SendCheckSampleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDoctorNameNull() {
                return this.IsNull(this.tableAnimalculeCheckTotal.DoctorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDoctorNameNull() {
                this[this.tableAnimalculeCheckTotal.DoctorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportTimeNull() {
                return this.IsNull(this.tableAnimalculeCheckTotal.ReportTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportTimeNull() {
                this[this.tableAnimalculeCheckTotal.ReportTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckResultNull() {
                return this.IsNull(this.tableAnimalculeCheckTotal.CheckResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckResultNull() {
                this[this.tableAnimalculeCheckTotal.CheckResultColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtbSamplesCheckTotalRowChangeEvent : global::System.EventArgs {
            
            private dtbSamplesCheckTotalRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtbSamplesCheckTotalRowChangeEvent(dtbSamplesCheckTotalRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtbSamplesCheckTotalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GermOccurRateRowChangeEvent : global::System.EventArgs {
            
            private GermOccurRateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GermOccurRateRowChangeEvent(GermOccurRateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GermOccurRateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GermDistributeTrendRowChangeEvent : global::System.EventArgs {
            
            private GermDistributeTrendRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GermDistributeTrendRowChangeEvent(GermDistributeTrendRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GermDistributeTrendRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AnimalculeCheckTotalRowChangeEvent : global::System.EventArgs {
            
            private AnimalculeCheckTotalRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalculeCheckTotalRowChangeEvent(AnimalculeCheckTotalRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalculeCheckTotalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591