//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5485
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace com.digitalwave.iCare.gui.LIS.Report {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsWorkloadReport")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsWorkloadReport : global::System.Data.DataSet {
        
        private workloadDataTable tableworkload;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsWorkloadReport() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsWorkloadReport(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["workload"] != null)) {
                    base.Tables.Add(new workloadDataTable(ds.Tables["workload"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public workloadDataTable workload {
            get {
                return this.tableworkload;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsWorkloadReport cln = ((dsWorkloadReport)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["workload"] != null)) {
                    base.Tables.Add(new workloadDataTable(ds.Tables["workload"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableworkload = ((workloadDataTable)(base.Tables["workload"]));
            if ((initTable == true)) {
                if ((this.tableworkload != null)) {
                    this.tableworkload.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsWorkloadReport";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsWorkloadReport.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableworkload = new workloadDataTable();
            base.Tables.Add(this.tableworkload);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeworkload() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsWorkloadReport ds = new dsWorkloadReport();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void workloadRowChangeEventHandler(object sender, workloadRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class workloadDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPATIENT_TYPE_CHR;
            
            private global::System.Data.DataColumn columnPATIENT_TYPE_DEC_VCHR;
            
            private global::System.Data.DataColumn columnAPPL_EMPID_CHR;
            
            private global::System.Data.DataColumn columnAPPL_EMPID_DEC_CHR;
            
            private global::System.Data.DataColumn columnREPORTOR_ID_CHR;
            
            private global::System.Data.DataColumn columnREPORTOR_ID_DEC_CHR;
            
            private global::System.Data.DataColumn columnSAMPLETYPE_VCHR;
            
            private global::System.Data.DataColumn columnSAMPLE_TYPE_ID_CHR;
            
            private global::System.Data.DataColumn columnAPPL_DEPTID_CHR;
            
            private global::System.Data.DataColumn columnAPPL_DEPTID_DEC_CHR;
            
            private global::System.Data.DataColumn columnCHECK_ITEM_ID_CHR;
            
            private global::System.Data.DataColumn columnCHECK_ITEM_NAME_VCHR;
            
            private global::System.Data.DataColumn columnITEM_COUNT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public workloadDataTable() {
                this.TableName = "workload";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal workloadDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected workloadDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_TYPE_CHRColumn {
                get {
                    return this.columnPATIENT_TYPE_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_TYPE_DEC_VCHRColumn {
                get {
                    return this.columnPATIENT_TYPE_DEC_VCHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn APPL_EMPID_CHRColumn {
                get {
                    return this.columnAPPL_EMPID_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn APPL_EMPID_DEC_CHRColumn {
                get {
                    return this.columnAPPL_EMPID_DEC_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REPORTOR_ID_CHRColumn {
                get {
                    return this.columnREPORTOR_ID_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REPORTOR_ID_DEC_CHRColumn {
                get {
                    return this.columnREPORTOR_ID_DEC_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SAMPLETYPE_VCHRColumn {
                get {
                    return this.columnSAMPLETYPE_VCHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SAMPLE_TYPE_ID_CHRColumn {
                get {
                    return this.columnSAMPLE_TYPE_ID_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn APPL_DEPTID_CHRColumn {
                get {
                    return this.columnAPPL_DEPTID_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn APPL_DEPTID_DEC_CHRColumn {
                get {
                    return this.columnAPPL_DEPTID_DEC_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CHECK_ITEM_ID_CHRColumn {
                get {
                    return this.columnCHECK_ITEM_ID_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CHECK_ITEM_NAME_VCHRColumn {
                get {
                    return this.columnCHECK_ITEM_NAME_VCHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ITEM_COUNTColumn {
                get {
                    return this.columnITEM_COUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public workloadRow this[int index] {
                get {
                    return ((workloadRow)(this.Rows[index]));
                }
            }
            
            public event workloadRowChangeEventHandler workloadRowChanging;
            
            public event workloadRowChangeEventHandler workloadRowChanged;
            
            public event workloadRowChangeEventHandler workloadRowDeleting;
            
            public event workloadRowChangeEventHandler workloadRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddworkloadRow(workloadRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public workloadRow AddworkloadRow(string PATIENT_TYPE_CHR, string PATIENT_TYPE_DEC_VCHR, string APPL_EMPID_CHR, string APPL_EMPID_DEC_CHR, string REPORTOR_ID_CHR, string REPORTOR_ID_DEC_CHR, string SAMPLETYPE_VCHR, string SAMPLE_TYPE_ID_CHR, string APPL_DEPTID_CHR, string APPL_DEPTID_DEC_CHR, string CHECK_ITEM_ID_CHR, string CHECK_ITEM_NAME_VCHR, int ITEM_COUNT) {
                workloadRow rowworkloadRow = ((workloadRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PATIENT_TYPE_CHR,
                        PATIENT_TYPE_DEC_VCHR,
                        APPL_EMPID_CHR,
                        APPL_EMPID_DEC_CHR,
                        REPORTOR_ID_CHR,
                        REPORTOR_ID_DEC_CHR,
                        SAMPLETYPE_VCHR,
                        SAMPLE_TYPE_ID_CHR,
                        APPL_DEPTID_CHR,
                        APPL_DEPTID_DEC_CHR,
                        CHECK_ITEM_ID_CHR,
                        CHECK_ITEM_NAME_VCHR,
                        ITEM_COUNT};
                rowworkloadRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowworkloadRow);
                return rowworkloadRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                workloadDataTable cln = ((workloadDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new workloadDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPATIENT_TYPE_CHR = base.Columns["PATIENT_TYPE_CHR"];
                this.columnPATIENT_TYPE_DEC_VCHR = base.Columns["PATIENT_TYPE_DEC_VCHR"];
                this.columnAPPL_EMPID_CHR = base.Columns["APPL_EMPID_CHR"];
                this.columnAPPL_EMPID_DEC_CHR = base.Columns["APPL_EMPID_DEC_CHR"];
                this.columnREPORTOR_ID_CHR = base.Columns["REPORTOR_ID_CHR"];
                this.columnREPORTOR_ID_DEC_CHR = base.Columns["REPORTOR_ID_DEC_CHR"];
                this.columnSAMPLETYPE_VCHR = base.Columns["SAMPLETYPE_VCHR"];
                this.columnSAMPLE_TYPE_ID_CHR = base.Columns["SAMPLE_TYPE_ID_CHR"];
                this.columnAPPL_DEPTID_CHR = base.Columns["APPL_DEPTID_CHR"];
                this.columnAPPL_DEPTID_DEC_CHR = base.Columns["APPL_DEPTID_DEC_CHR"];
                this.columnCHECK_ITEM_ID_CHR = base.Columns["CHECK_ITEM_ID_CHR"];
                this.columnCHECK_ITEM_NAME_VCHR = base.Columns["CHECK_ITEM_NAME_VCHR"];
                this.columnITEM_COUNT = base.Columns["ITEM_COUNT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPATIENT_TYPE_CHR = new global::System.Data.DataColumn("PATIENT_TYPE_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_TYPE_CHR);
                this.columnPATIENT_TYPE_DEC_VCHR = new global::System.Data.DataColumn("PATIENT_TYPE_DEC_VCHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_TYPE_DEC_VCHR);
                this.columnAPPL_EMPID_CHR = new global::System.Data.DataColumn("APPL_EMPID_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPPL_EMPID_CHR);
                this.columnAPPL_EMPID_DEC_CHR = new global::System.Data.DataColumn("APPL_EMPID_DEC_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPPL_EMPID_DEC_CHR);
                this.columnREPORTOR_ID_CHR = new global::System.Data.DataColumn("REPORTOR_ID_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREPORTOR_ID_CHR);
                this.columnREPORTOR_ID_DEC_CHR = new global::System.Data.DataColumn("REPORTOR_ID_DEC_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREPORTOR_ID_DEC_CHR);
                this.columnSAMPLETYPE_VCHR = new global::System.Data.DataColumn("SAMPLETYPE_VCHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAMPLETYPE_VCHR);
                this.columnSAMPLE_TYPE_ID_CHR = new global::System.Data.DataColumn("SAMPLE_TYPE_ID_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAMPLE_TYPE_ID_CHR);
                this.columnAPPL_DEPTID_CHR = new global::System.Data.DataColumn("APPL_DEPTID_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPPL_DEPTID_CHR);
                this.columnAPPL_DEPTID_DEC_CHR = new global::System.Data.DataColumn("APPL_DEPTID_DEC_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPPL_DEPTID_DEC_CHR);
                this.columnCHECK_ITEM_ID_CHR = new global::System.Data.DataColumn("CHECK_ITEM_ID_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHECK_ITEM_ID_CHR);
                this.columnCHECK_ITEM_NAME_VCHR = new global::System.Data.DataColumn("CHECK_ITEM_NAME_VCHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHECK_ITEM_NAME_VCHR);
                this.columnITEM_COUNT = new global::System.Data.DataColumn("ITEM_COUNT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnITEM_COUNT);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public workloadRow NewworkloadRow() {
                return ((workloadRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new workloadRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(workloadRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.workloadRowChanged != null)) {
                    this.workloadRowChanged(this, new workloadRowChangeEvent(((workloadRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.workloadRowChanging != null)) {
                    this.workloadRowChanging(this, new workloadRowChangeEvent(((workloadRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.workloadRowDeleted != null)) {
                    this.workloadRowDeleted(this, new workloadRowChangeEvent(((workloadRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.workloadRowDeleting != null)) {
                    this.workloadRowDeleting(this, new workloadRowChangeEvent(((workloadRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveworkloadRow(workloadRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsWorkloadReport ds = new dsWorkloadReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "workloadDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class workloadRow : global::System.Data.DataRow {
            
            private workloadDataTable tableworkload;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal workloadRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableworkload = ((workloadDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_TYPE_CHR {
                get {
                    try {
                        return ((string)(this[this.tableworkload.PATIENT_TYPE_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“workload”中列“PATIENT_TYPE_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableworkload.PATIENT_TYPE_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_TYPE_DEC_VCHR {
                get {
                    try {
                        return ((string)(this[this.tableworkload.PATIENT_TYPE_DEC_VCHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“workload”中列“PATIENT_TYPE_DEC_VCHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableworkload.PATIENT_TYPE_DEC_VCHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string APPL_EMPID_CHR {
                get {
                    try {
                        return ((string)(this[this.tableworkload.APPL_EMPID_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“workload”中列“APPL_EMPID_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableworkload.APPL_EMPID_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string APPL_EMPID_DEC_CHR {
                get {
                    try {
                        return ((string)(this[this.tableworkload.APPL_EMPID_DEC_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“workload”中列“APPL_EMPID_DEC_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableworkload.APPL_EMPID_DEC_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REPORTOR_ID_CHR {
                get {
                    try {
                        return ((string)(this[this.tableworkload.REPORTOR_ID_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“workload”中列“REPORTOR_ID_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableworkload.REPORTOR_ID_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REPORTOR_ID_DEC_CHR {
                get {
                    try {
                        return ((string)(this[this.tableworkload.REPORTOR_ID_DEC_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“workload”中列“REPORTOR_ID_DEC_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableworkload.REPORTOR_ID_DEC_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SAMPLETYPE_VCHR {
                get {
                    try {
                        return ((string)(this[this.tableworkload.SAMPLETYPE_VCHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“workload”中列“SAMPLETYPE_VCHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableworkload.SAMPLETYPE_VCHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SAMPLE_TYPE_ID_CHR {
                get {
                    try {
                        return ((string)(this[this.tableworkload.SAMPLE_TYPE_ID_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“workload”中列“SAMPLE_TYPE_ID_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableworkload.SAMPLE_TYPE_ID_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string APPL_DEPTID_CHR {
                get {
                    try {
                        return ((string)(this[this.tableworkload.APPL_DEPTID_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“workload”中列“APPL_DEPTID_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableworkload.APPL_DEPTID_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string APPL_DEPTID_DEC_CHR {
                get {
                    try {
                        return ((string)(this[this.tableworkload.APPL_DEPTID_DEC_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“workload”中列“APPL_DEPTID_DEC_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableworkload.APPL_DEPTID_DEC_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CHECK_ITEM_ID_CHR {
                get {
                    try {
                        return ((string)(this[this.tableworkload.CHECK_ITEM_ID_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“workload”中列“CHECK_ITEM_ID_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableworkload.CHECK_ITEM_ID_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CHECK_ITEM_NAME_VCHR {
                get {
                    try {
                        return ((string)(this[this.tableworkload.CHECK_ITEM_NAME_VCHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“workload”中列“CHECK_ITEM_NAME_VCHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableworkload.CHECK_ITEM_NAME_VCHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ITEM_COUNT {
                get {
                    try {
                        return ((int)(this[this.tableworkload.ITEM_COUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“workload”中列“ITEM_COUNT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableworkload.ITEM_COUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_TYPE_CHRNull() {
                return this.IsNull(this.tableworkload.PATIENT_TYPE_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_TYPE_CHRNull() {
                this[this.tableworkload.PATIENT_TYPE_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_TYPE_DEC_VCHRNull() {
                return this.IsNull(this.tableworkload.PATIENT_TYPE_DEC_VCHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_TYPE_DEC_VCHRNull() {
                this[this.tableworkload.PATIENT_TYPE_DEC_VCHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAPPL_EMPID_CHRNull() {
                return this.IsNull(this.tableworkload.APPL_EMPID_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAPPL_EMPID_CHRNull() {
                this[this.tableworkload.APPL_EMPID_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAPPL_EMPID_DEC_CHRNull() {
                return this.IsNull(this.tableworkload.APPL_EMPID_DEC_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAPPL_EMPID_DEC_CHRNull() {
                this[this.tableworkload.APPL_EMPID_DEC_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREPORTOR_ID_CHRNull() {
                return this.IsNull(this.tableworkload.REPORTOR_ID_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREPORTOR_ID_CHRNull() {
                this[this.tableworkload.REPORTOR_ID_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREPORTOR_ID_DEC_CHRNull() {
                return this.IsNull(this.tableworkload.REPORTOR_ID_DEC_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREPORTOR_ID_DEC_CHRNull() {
                this[this.tableworkload.REPORTOR_ID_DEC_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSAMPLETYPE_VCHRNull() {
                return this.IsNull(this.tableworkload.SAMPLETYPE_VCHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSAMPLETYPE_VCHRNull() {
                this[this.tableworkload.SAMPLETYPE_VCHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSAMPLE_TYPE_ID_CHRNull() {
                return this.IsNull(this.tableworkload.SAMPLE_TYPE_ID_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSAMPLE_TYPE_ID_CHRNull() {
                this[this.tableworkload.SAMPLE_TYPE_ID_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAPPL_DEPTID_CHRNull() {
                return this.IsNull(this.tableworkload.APPL_DEPTID_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAPPL_DEPTID_CHRNull() {
                this[this.tableworkload.APPL_DEPTID_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAPPL_DEPTID_DEC_CHRNull() {
                return this.IsNull(this.tableworkload.APPL_DEPTID_DEC_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAPPL_DEPTID_DEC_CHRNull() {
                this[this.tableworkload.APPL_DEPTID_DEC_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCHECK_ITEM_ID_CHRNull() {
                return this.IsNull(this.tableworkload.CHECK_ITEM_ID_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCHECK_ITEM_ID_CHRNull() {
                this[this.tableworkload.CHECK_ITEM_ID_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCHECK_ITEM_NAME_VCHRNull() {
                return this.IsNull(this.tableworkload.CHECK_ITEM_NAME_VCHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCHECK_ITEM_NAME_VCHRNull() {
                this[this.tableworkload.CHECK_ITEM_NAME_VCHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsITEM_COUNTNull() {
                return this.IsNull(this.tableworkload.ITEM_COUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetITEM_COUNTNull() {
                this[this.tableworkload.ITEM_COUNTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class workloadRowChangeEvent : global::System.EventArgs {
            
            private workloadRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public workloadRowChangeEvent(workloadRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public workloadRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591