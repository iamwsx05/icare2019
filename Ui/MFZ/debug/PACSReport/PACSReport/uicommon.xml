<?xml version="1.0"?>
<doc>
    <assembly>
        <name>uicommon</name>
    </assembly>
    <members>
        <member name="T:biovision.ihospital.uicommon.SqlServerDBCommon">
            <remarks>
            Copyright (C), 2009-2009, BioVision Software. Co., Ltd.
            Author: 
            Version: Date:  
            Description:      　    封装数据库的公用操作：
                                    如：
                                    获取参数，建立数据库连接；
            　　　　　　　　　　　　连接关闭。
            Others:  
            Function List: 
            Change History: 
            1. Date:         21111010
               Author:       PengYongQing
               Modification: Design,Create
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.GetSqlConnection(System.String)">
            <remarks>
            Description: 　 读取配置参数，获取一个数据库连接（获取机制是新建一个还是复用连接， 先实现为 每次新建一个连接），所返回的Connection
                             已经Open。
                             但调用端需要显示地调用进行 连接释放， 本方法不负责连接释放。 
                                 执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:              
            Called By:       系统中所有需要获得数据库连接的地方， 避免每次编写重复的数据库连接代码。
            Table Accessed:  
            Table Updated:  
            Input:        
            Output:           SQLConnection 
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.GetSqlConnection">
            <remarks>
            Description: 　 读取配置参数，获取一个数据库连接（获取机制是新建一个还是复用连接， 先实现为 每次新建一个连接），所返回的Connection
                             已经Open。
                             但调用端需要显示地调用进行 连接释放， 本方法不负责连接释放。 
                                 执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:              
            Called By:       系统中所有需要获得数据库连接的地方， 避免每次编写重复的数据库连接代码。
            Table Accessed:  
            Table Updated:  
            Input:        
            Output:           SQLConnection 
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.GetConnectStringFromConfig(System.String)">
            <summary>
            读取XML中的数据,获得连接字符串
            <param name="Type">要连接的数据库类型(为BROKERDB 连接HIS中间数据库BROKERDB，为DICOMDB 连接PACS数据库DICOMDB)</param>
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.CloseConnection(System.Data.SqlClient.SqlConnection)">
            <remarks>
            Description: 　  关闭参数所指定数据库连接，提供一种统一的关闭方式，与调用端自主关闭功能一致。
                                执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:  
            Called By:        
            Table Accessed:  
            Table Updated:  
            Input:        
            Output:           System.Data.SqlConnection
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.ExecuteNonQuery(System.String,System.String)">
            <remarks>
            Description: 　  对于非查询的 数据库更新， 插入,删除操作，只需要调用端指定SQL字符串，然后调用本方法
                               本方法来完成SQLConnection，SqlCommand的建立，打开，和ExecuteNonQuery(sqlString)的操作。
                                调用端不需要显示地调用进行 连接释放， 本方法负责ExecuteNonQuery之后连接释放。
                                目前实现机制为，每次都新建Connection。如果调用端传入的 SQL语句有错误， 执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:  
            Called By:        
            Table Accessed:  
            Table Updated:  
            Input:        SQL 语句
            Output:        bool，执行失败返回FALSE
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.ExecuteNonQuery(System.String)">
            <remarks>
            Description: 　  对于非查询的 数据库更新， 插入,删除操作，只需要调用端指定SQL字符串，然后调用本方法
                               本方法来完成SQLConnection，SqlCommand的建立，打开，和ExecuteNonQuery(sqlString)的操作。
                                调用端不需要显示地调用进行 连接释放， 本方法负责ExecuteNonQuery之后连接释放。
                                目前实现机制为，每次都新建Connection。如果调用端传入的 SQL语句有错误， 执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:  
            Called By:        
            Table Accessed:  
            Table Updated:  
            Input:        SQL 语句
            Output:        bool，执行失败返回FALSE
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.ExeuteDataTable(System.String)">
            <summary>
            本方法来完成SQLConnection，SqlCommand的建立，打开，和 ExeuteDataTable( )的操作，返回包含数据的datatable
            </summary>
            <param name="sqlString">查询字符串</param>
            <returns>返回<c>DataTable</c></returns>
            <remarks>
            Description: 　  对于非查询的 数据库查询操作，只需要调用端指定SQL字符串，然后调用本方法
                               本方法来完成SQLConnection，SqlCommand的建立，打开，和 ExeuteDataTable( )的操作，返回包含数据的datatable
                                目前实现机制为，每次都新建Connection。如果调用端传入的 SQL语句有错误， 执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:  
            Called By:        
            Table Accessed:  
            Table Updated:  
            Input:        SQL 语句
            Output:       返回datatable
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.ExeuteDataSet(System.String,System.String)">
            <summary>
            执行sql语句，返回数据集<c>DataSet</c>
            </summary>
            <param name="sqlString">查询字符串</param>
            <returns>数据集</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.ExeuteDataSet(System.String)">
            <summary>
            执行sql语句，返回数据集<c>DataSet</c>
            </summary>
            <param name="sqlString">查询字符串</param>
            <returns>数据集</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.ExecuteBlob(System.String)">
            <summary>
            读取单个blob文件
            </summary>
            <param name="sqlString">查询语句</param>
            <returns>返回字节数字</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.ExecuteBlob(System.String,System.String)">
            <summary>
            查询单个blob文件，并保存到文件
            </summary>
            <param name="sqlString"></param>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.ExecuteBlob(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            获取blob文件数组
            </summary>
            <param name="sqlString"></param>
            <param name="fields">需要得到的blob文件字段</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.GetMaxID(System.String,System.String,System.String)">
            <summary>
            得到最大值
            </summary>
            <param name="FieldName"></param>
            <param name="TableName"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.GetMaxID(System.String,System.String)">
            <summary>
            得到最大值
            </summary>
            <param name="FieldName"></param>
            <param name="TableName"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.Exists(System.String,System.String)">
            <summary>
            是否存在
            </summary>
            <param name="strSql"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.Exists(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="strSql"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.GetSingle(System.String,System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.GetSingle(System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.ExecuteSqlTran(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.ExecuteSqlTran(System.Collections.Generic.List{System.String})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.ExecuteSql(System.String,System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.ExecuteSqlInsertImg(System.String,System.Byte[],System.String)">
            <summary>
            向数据库里插入图像格式的字段(和上面情况类似的另一种实例)
            </summary>
            <param name="strSQL">SQL语句</param>
            <param name="fs">图像字节,数据库的字段类型为image的情况</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.ExecuteSql(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.ExecuteSql(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.ExecuteSqlTran(System.Collections.Hashtable,System.String)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.ExecuteSqlTranWithIndentity(System.Collections.Hashtable,System.String)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.GetSingle(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.Query(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SqlServerDBCommon.SetSqlConSaveConfig(System.String)">
            <summary>
             设置数据库服务器连接配置信息
            </summary>
            <param name="strConfig"> 数据库服务器配置信息</param>
        </member>
        <member name="T:biovision.ihospital.uicommon.RecentInputRecordTextBoxControl">
            <remarks>
            Copyright (C), 2009-2009, BioVision Software. Co., Ltd.　
            Author: 
            Version: Date:  
            Description: 　　记录最近输入的 控件的公共类.
                             一个用户在本文本框输入的多次内容会自动按照顺序出现在下拉列表中. 以方便用户选择.
                             基于Combox控件实现，
                             配置信息保存在： ./config/recentlyInputCache.xml
                             
                               
            Others:  
            Function List: 
            Change History: 
            1. Date:         20091028
               Author:       LiangV
               Modification: Design,Create
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.RecentInputRecordTextBoxControl.SaveCurrentInputToRecentList(System.String,System.String)">
             <remarks>
             Description: 　将当前在次控件内的输入保存到 ./config/recentlyInputCache.xml中的与本 控件对应的 位置.
                             为每个控件加入的过程中,需要判断逻辑,如果该字段的RecentList的Item个数有否超过20，如果超过，则按照 先进先出的 队列规则 实现数据的 保存。
                            最大保存数目 20， 从 ./config/recentlyInputCache.xml 的 MaxRecentItemTotal中读取，默认为20.
             Calls:  
             Called By:     界面提交按钮,判断提交成功后,则调用控件保存刚输入的信息,以便后续输入时可以下拉选择.        
             Table Accessed: ./config/recentlyInputCache.xml  
             Table Updated:  
             Input:          User
              
             Output:
            <param name="inputcontrolname">控件名称</param>
            <param name="value">值</param>
             </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.RecentInputRecordTextBoxControl.LoadCurrentInputToRecentList(System.String)">
            <summary>
            读取xml数据
            </summary>
            <param name="ControlName">控件名称</param>
            <returns>结果集</returns>
        </member>
        <member name="M:uicommon.biovision.ihospital.Controls.SetColumnsDialog.SetColumnsDialog_Load(System.Object,System.EventArgs)">
            <summary>
            加载事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:uicommon.biovision.ihospital.Controls.SetColumnsDialog.btPre_Click(System.Object,System.EventArgs)">
            <summary>
            上移
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:uicommon.biovision.ihospital.Controls.SetColumnsDialog.btNex_Click(System.Object,System.EventArgs)">
            <summary>
            下移
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:uicommon.biovision.ihospital.Controls.SetColumnsDialog.btSave_Click(System.Object,System.EventArgs)">
            <summary>
            保存
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:uicommon.biovision.ihospital.Controls.SetColumnsDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:uicommon.biovision.ihospital.Controls.SetColumnsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:uicommon.biovision.ihospital.Controls.SetColumnsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:biovision.ihospital.uicommon.SpellAndWbCode">
            <summary>
            获取拼音码和五笔码的辅助类
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.SpellAndWbCode.reader">
            <summary>
            XML文件读取实例
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.SpellAndWbCode.strXmlData">
            <summary>
            XML文件中数据
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.SpellAndWbCode.#ctor">
            <summary>
            构造函数，初始化XMLREADER
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.SpellAndWbCode.getXmlData">
            <summary>
            读取XML文件中数据
            </summary>
            <returns>返回String[]</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SpellAndWbCode.searchWord(System.String,System.Int32,System.Int32)">
            <summary>
            查找汉字
            </summary>
            <param name="strName">汉字</param>
            <param name="start">搜索的开始位置</param>
            <param name="end">搜索的结束位置</param>
            <returns>汉语反义成字符串，该字符串只包含大写的英文字母</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SpellAndWbCode.GetSpellCode(System.String)">
            <summary>
            获得汉语的拼音码
            </summary>
            <param name="strName">汉字</param>
            <returns>汉语拼音码,该字符串只包含大写的英文字母</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.SpellAndWbCode.GetWBCode(System.String)">
            <summary>
            获得汉语的五笔码
            </summary>
            <param name="strName">汉字</param>
            <returns>汉语五笔码,该字符串只包含大写的英文字母</returns>
        </member>
        <member name="T:biovision.ihospital.uicommon.DatabaseCommon">
            <summary>
            Description:  封装连接数据库的方法。
                          新增数据
                          删除数据
                          修改数据
                          查询数据
            Data:         2015.01.04
            Author:       PengYongQing
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.DatabaseCommon.strDBConfiginiPath">
            <summary>
            DBConfig.ini所处路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.DatabaseCommon.strCurrentDatabaseConnection">
            <summary>
            当前数据库连接字符串
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.DatabaseCommon.strCurrentDatabaseType">
            <summary>
            当前数据库类型
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.DatabaseCommon.booAutomaticSwitching">
            <summary>
            oracle如果当掉，是否自动切换至sqlserver
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.GetDBConfigFilePath">
            <summary>
            Description:  读取本地DBConfig.ini判断共享文件夹中的ini文件是否存在，
                          如果存在，则返回共享文件夹中ini路径，
                          如果不存在，则返回工作站config下DBConfig.ini路径
            </summary>
            <returns>返回DBConfig.ini路径，如果返回Empty，则说明没有找到DBConfig.ini</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.AutomaticSwitching(System.String)">
            <summary>
            读取DBConfig.ini配置，如果oracle宕掉，是否自动切换到sqlserver,返回true则说明自动切换
            </summary>
            <param name="strINIPath">DBConfig.ini路径</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.GetDBConnectionString(System.String)">
            <summary>
            Description:  根据DBConfig.ini路径返回数据库连接字符串
            </summary>
            <param name="strINIPath">DBConfig.ini所在路径</param>
            <returns>数据库连接字符串，如果找不到，则返回空</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.SetTheCurrentDatabaseType(System.String,System.String)">
            <summary>
            Description:  设置服务器DBConfig.ini的当前数据库的类型
            </summary>
            <param name="strPACSDataBaseType">要设置的当前数据库的类型</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.TestTheConnectionDatabase(System.String,System.String)">
            <summary>
            Description:  测试连接数据库连接是否成功
            </summary>
            <param name="strPACSDatabaseType">当前使用的数据库类型</param>
            <param name="strPacsDataBaseConnection">PACS数据库的连接字符串</param>
            <returns>return true:连接成功！return false:连接失败</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.InitializeObject">
            <summary>
            Description:  初始化本类所需要的对象，
                          DBConfig.ini路径，
                          数据库连接字符串
                          数据库类型
                          oracle当掉，是否自动切换至sqlserver
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.SwitchDatabaseToTheSqlserver(System.Boolean)">
            <summary>
            Description: 如果当前数据库是oracle，监测服务是否当掉，如果当掉并且AutomaticSwitching=true,则自动切换到
                         sqlserver数据库
            </summary>
            <param name="booForcedToSwitch">是否强制切换到sqlserver(但是还是受booAutomaticSwitching元素限制)，true:强制切换、false:不强制，需读取相关配置才跳转</param>
            <returns>true:切换成sqlserver数据库,false:不切换至sqlserver数据库</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.PrepareCommand(System.Data.OracleClient.OracleCommand,System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            
            </summary>
            <param name="cmd"></param>
            <param name="conn"></param>
            <param name="trans"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            
            </summary>
            <param name="cmd"></param>
            <param name="conn"></param>
            <param name="trans"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.ExecuteNonQuery(System.String,System.String)">
            <summary>
            Description:  新增、修改、删除
            </summary>
            <param name="strOracleSql">Oracle的sql语句</param>
            <param name="strSqlserverSql">sqlserver的sql语句</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.ExecuteNonQuery(System.String)">
            <summary>
            Description:  新增、修改、删除
            </summary>
            <param name="StrSql">通用的SQL语句，可以兼容SQLServer和Oracle</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.ExecuteNonQuery2(System.String,System.String)">
            <summary>
            Description:  新增、修改、删除
            </summary>
            <param name="strOracleSql">oracle sql语句</param>
            <param name="strSqlserverSql">SqlServer sql语句</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.ExecuteNonQuery(System.String,System.String,System.Data.OracleClient.OracleParameter[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句，带反编译功能的,返回影响的记录数
            </summary>
            <param name="strOracleSql">Oracle数据库SQL语句</param>
            <param name="strSqlserverSql">Sqlserver数据库SQL语句</param>
            <param name="cmdParms_Oracle"></param>
            <param name="cmdParms_SqlServer"></param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.ExeuteDataTable(System.String)">
            <summary>
             Description:  查询数据，返回DataTable
            </summary>
            <param name="strSql"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.ExeuteDataTable(System.String,System.String)">
            <summary>
            Description:  查询数据，返回DataTable
            </summary>
            <param name="strOracleSql">Oracle的sql语句</param>
            <param name="strSqlserverSql">sqlserver的sql语句</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.ExeuteDataTable(System.String,System.String,System.Data.OracleClient.OracleParameter[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行Sql语句,带反编译功能，返回DataTable
            </summary>
            <param name="strOracleSql">Oracle数据库SQL语句</param>
            <param name="strSqlserverSql">Sqlserver数据库SQL语句</param>
            <param name="cmdParms_Oracle"></param>
            <param name="cmdParms_Sqlserver"></param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.ExeuteDataSet(System.String)">
            <summary>
            Description:  查询数据，返回DataSet
            </summary>
            <param name="strSql">通用SQL语句，能兼容SQLServer和Oracle</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.ExeuteDataSet(System.String,System.String)">
            <summary>
            Description:  查询数据，返回DataSet
            </summary>
            <param name="strOracleSql">Oracle的sql语句</param>
            <param name="strSqlserverSql">sqlserver的sql语句</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.ExeuteDataSet(System.String,System.String,System.Data.OracleClient.OracleParameter[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Description:  查询数据，带反编译功能，返回DataSet
            </summary>
            <param name="strOracleSql">Oracle的sql语句</param>
            <param name="strSqlserverSql">sqlserver的sql语句</param>
            <param name="cmdParms_Oracle"></param>
            <param name="cmdParms_Sqlserver"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.GetSingle(System.String,System.String)">
            <summary>
            Description:  执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="strOracleSql">Oracle的sql语句</param>
            <param name="strSqlserverSql">sqlserver的sql语句</param>
            <returns>查询结果(数据类型:object)</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.GetSingle(System.String)">
            <summary>
            Description:  执行一条计算查询结果语句(相同sql语句)，返回查询结果（object）。
            </summary>
            <param name="strsql">sql语句</param>
            <returns>查询结果(数据类型:object)</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.GetSingle(System.String,System.String,System.Data.OracleClient.OracleParameter[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Description:  执行一条计算查询结果语句，带反编译功能，返回查询结果（object）。
            </summary>
            <param name="strOracleSql">Oracle数据库sql语句</param>
            <param name="strSqlserverSql">Sqlserver数据库sql语句</param>
            <param name="cmdParms_Oracle"></param>
            <param name="cmdParms_Sqlserver"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.Exists(System.String)">
            <summary>
            Description:  输入SQL语句，判断指定的数据是否存在
            </summary>
            <param name="strSql">通用的SQL，能兼容SQLServer和Oracle</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.Exists(System.String,System.String)">
            <summary>
            Description:  输入SQL语句，判断指定的数据是否存在
            </summary>
            <param name="strOracleSql">oracle数据库sql语句</param>
            <param name="strSqlserverSql">Sqlserver数据库sql语句</param>
            <returns>true:指定查询的数据存在</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.Exists(System.String,System.String,System.Data.OracleClient.OracleParameter[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Description:  输入SQL语句，判断指定的数据是否存在
            </summary>
            <param name="strOracleSql">oracle数据库sql语句</param>
            <param name="strSqlserverSql">Sqlserver数据库sql语句</param>
            <param name="cmdParms_Oracle"></param>
            <param name="cmdParms_Sqlserver"></param>
            <returns>true:指定查询的数据存在</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.GetMaxID(System.String,System.String)">
            <summary>
            Description:  根据表名与int类型的字段，返回该字段最大值
            </summary>
            <param name="FieldName">表名</param>
            <param name="TableName">字段名(必须为int类型)</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.ExecuteSqlTran(System.Collections.Generic.List{System.String})">
            <summary>
             Description:  执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="sqlList">通用的SQL语句集合，SQL语句能兼容SQLServer和Oracle</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.ExecuteSqlTran(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Description:  执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLOracleStringList">Oracle数据库语句</param>
            <param name="SQLSqlServerStringList">Sqlserver数据库语句</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.ExecuteScalar(System.String,System.String)">
            <summary>
            执行SQL语句，使用SQLServer时，执行Insert时会返回最新的主键ID(自增列) ， 语法：SELECT @@IDENTITY
            </summary>
            <param name="strOracleSql">Oracle语句</param>
            <param name="strSqlServerSql">SQLServer语句</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.IsIdentified(System.String,System.String)">
            <summary>
            判断某张表的某一列是否是标识列
            ojk 2015-6-12
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.CloseConnection(System.Data.OracleClient.OracleConnection)">
            <remarks>
            Description: 　  关闭oracle的OracleConnection
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.CloseConnection(System.Data.SqlClient.SqlConnection)">
            <remarks>
            Description: 　  关闭sqlserver的SqlConnection
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.OracleCommit">
            <summary>
            Oracle数据库commit事务提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.GetOracleConnection">
            <summary>
            获取oracle连接对象
            </summary>
            <returns></returns>
        </member>
        <member name="F:biovision.ihospital.uicommon.DatabaseCommon.conncetString">
            <summary>
            获取SqlServer连接对象 add by pyq 20150521
            </summary>
            <param name="DatabaseName">SqlServer数据库名</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DatabaseCommon.GetConnectStringFromConfig(System.String)">
            <summary>
            读取XML中的数据,获得连接字符串
            <param name="Type">要连接的数据库类型(为BROKERDB 连接HIS中间数据库BROKERDB，为DICOMDB 连接PACS数据库DICOMDB)</param>
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.AccessDBCommon.GetOleDbConnection(System.String)">
            <summary>
            
            </summary>
            <param name="datasourcepatch"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.BV_BLL_Function_Xml.UpdateCallingListData(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            新建病人、修改病人操作时，更新CallingListData.xml，
            修改叫号病人队列
            </summary>
            <param name="examinationID">检查ID，对应CallingListData.xml中name属性</param>
            <param name="instrumentModel">仪器型号</param>
            <param name="PatientName">病人姓名</param>
            <param name="examineDates">检查日期 格式:yyyy-MM-dd</param>
            <param name="IsAddPatient">是否是新建病人操作，true:新建病人，false:修改病人信息</param>
            <param name="AreEmergency">是否是急诊  true:急诊</param>
            <param name="examneType">检查类型</param>
        </member>
        <member name="T:biovision.ihospital.uicommon.LockStatusHandler">
            <summary>
            用户锁定报告锁定帮助类
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.LockStatusHandler.GetExaminationLock(System.Int32)">
            <summary>
            根据检查ID,判断该检查记录是否被锁定 true:没有被锁定，可以编辑、false:被锁定中，不可以编辑
            </summary>
            <param name="examinationID">检查ID</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.LockStatusHandler.GetExaminationLock(System.Int32,System.Int32)">
            <summary>
            根据检查ID和用户ID，判断该检查记录是否被锁定 true:没有被锁定，可以编辑、false:被锁定中，不可以编辑
            </summary>
            <param name="examinationID">检查ID</param>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.LockStatusHandler.Addlock(System.Int32,System.Int32)">
            <summary>
            给检查信息添加锁定状态
            </summary>
            <param name="examnationID"></param>
            <param name="userid"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.LockStatusHandler.DeleteLock">
            <summary>
            解除报告锁定
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.LockStatusHandler.DeleteLock(System.Int32)">
            <summary>
            根据检查ID删除锁定状态
            </summary>
            <param name="examination"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.LockStatusHandler.DeleteUserAllLock(System.Int32)">
            <summary>
            删除该用户的报告锁
            </summary>
            <param name="userid"></param>
            <returns></returns>
        </member>
        <member name="M:uicommon.biovision.ihospital.Controls.MyAskMessageBox.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:uicommon.biovision.ihospital.Controls.MyAskMessageBox.SetFontSize(System.Windows.Forms.Control)">
            <summary>
            设置控件的字体
            </summary>
        </member>
        <member name="M:uicommon.biovision.ihospital.Controls.MyAskMessageBox.#ctor(System.String,System.String,System.String,System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            构造函数重载 适应于多行文字
            </summary>
            <param name="caption">消息框的标题</param>
            <param name="text">消息框要显示的文本</param>
            <param name="btnvalue1">控件还回值是yes的控件的文本</param>
            <param name="btnvalue2">控件还回值是no的控件的文本</param>
            <param name="icon">提示图片</param>
        </member>
        <member name="M:uicommon.biovision.ihospital.Controls.MyAskMessageBox.#ctor(System.String,System.String,System.String,System.String,System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            构造函数重载 适应于单行文字
            </summary>
            <param name="sMsgType">适应类型 Multi,Single</param>
            <param name="caption">消息框的标题</param>
            <param name="text">消息框要显示的文本</param>
            <param name="btnvalue1">控件还回值是yes的控件的文本</param>
            <param name="btnvalue2">控件还回值是no的控件的文本</param>
            <param name="icon">提示图片</param>
        </member>
        <member name="M:uicommon.biovision.ihospital.Controls.MyAskMessageBox.btnDelete_Click(System.Object,System.EventArgs)">
            <summary>
            确认按钮
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:uicommon.biovision.ihospital.Controls.MyAskMessageBox.btnClose_Click(System.Object,System.EventArgs)">
            <summary>
            关闭窗体按钮
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:uicommon.biovision.ihospital.Controls.MyAskMessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:uicommon.biovision.ihospital.Controls.MyAskMessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:uicommon.biovision.ihospital.Controls.MyAskMessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.GetOleDbConnection">
            <remarks>
            Description: 　 读取配置参数，获取一个数据库连接（获取机制是新建一个还是复用连接， 先实现为 每次新建一个连接），所返回的Connection
                             已经Open。
                             但调用端需要显示地调用进行 连接释放， 本方法不负责连接释放。 
                                 执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:              
            Called By:       系统中所有需要获得数据库连接的地方， 避免每次编写重复的数据库连接代码。
            Table Accessed:  
            Table Updated:  
            Input:        
            Output:       
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.CloseConnection(System.Data.OleDb.OleDbConnection)">
            <remarks>
            Description: 　  关闭参数所指定数据库连接，提供一种统一的关闭方式，与调用端自主关闭功能一致。
                                执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:  
            Called By:        
            Table Accessed:  
            Table Updated:  
            Input:        
            Output:           System.Data.SqlConnection
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.ExecuteNonQuery(System.String)">
            <remarks>
            Description: 　  对于非查询的 数据库更新， 插入,删除操作，只需要调用端指定SQL字符串，然后调用本方法
                               本方法来完成SQLConnection，SqlCommand的建立，打开，和ExecuteNonQuery(sqlString)的操作。
                                调用端不需要显示地调用进行 连接释放， 本方法负责ExecuteNonQuery之后连接释放。
                                目前实现机制为，每次都新建Connection。如果调用端传入的 SQL语句有错误， 执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:  
            Called By:        
            Table Accessed:  
            Table Updated:  
            Input:        SQL 语句
            Output:        bool，执行失败返回FALSE
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.ExeuteDataTable(System.String)">
            <summary>
            本方法来完成SQLConnection，SqlCommand的建立，打开，和 ExeuteDataTable( )的操作，返回包含数据的datatable
            </summary>
            <param name="sqlString">查询字符串</param>
            <returns>返回<c>DataTable</c></returns>
            <remarks>
            Description: 　  对于非查询的 数据库查询操作，只需要调用端指定SQL字符串，然后调用本方法
                               本方法来完成SQLConnection，SqlCommand的建立，打开，和 ExeuteDataTable( )的操作，返回包含数据的datatable
                                目前实现机制为，每次都新建Connection。如果调用端传入的 SQL语句有错误， 执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:  
            Called By:        
            Table Accessed:  
            Table Updated:  
            Input:        SQL 语句
            Output:       返回datatable
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.ExeuteDataSet(System.String)">
            <summary>
            执行sql语句，返回数据集<c>DataSet</c>
            </summary>
            <param name="sqlString">查询字符串</param>
            <returns>数据集</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.ExecuteBlob(System.String)">
            <summary>
            读取单个blob文件
            </summary>
            <param name="sqlString">查询语句</param>
            <returns>返回字节数字</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.ExecuteBlob(System.String,System.String)">
            <summary>
            查询单个blob文件，并保存到文件
            </summary>
            <param name="sqlString"></param>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.ExecuteBlob(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            获取blob文件数组
            </summary>
            <param name="sqlString"></param>
            <param name="fields">需要得到的blob文件字段</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.GetMaxID(System.String,System.String)">
            <summary>
            得到最大值
            </summary>
            <param name="FieldName"></param>
            <param name="TableName"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.Exists(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="strSql"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.GetSingle(System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.ExecuteSqlTran(System.Collections.Generic.List{System.String})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.ExecuteSql(System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.ExecuteSqlInsertImg(System.String,System.Byte[])">
            <summary>
            向数据库里插入图像格式的字段(和上面情况类似的另一种实例)
            </summary>
            <param name="strSQL">SQL语句</param>
            <param name="fs">图像字节,数据库的字段类型为image的情况</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.ExecuteSql(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.ExecuteSqlTran(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OleDbParameter[]）</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.ExecuteSqlTranWithIndentity(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OleDbParameter[]）</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.GetSingle(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.Query(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DB2DBCommon.SetSqlConSaveConfig(System.String)">
            <summary>
             设置数据库服务器连接配置信息
            </summary>
            <param name="strConfig"> 数据库服务器配置信息</param>
        </member>
        <member name="T:biovision.ihospital.uicommon.GeneralDelegate">
            <summary>
            通用委托(一些通用的委托)
            </summary>
        </member>
        <member name="T:biovision.ihospital.uicommon.GeneralDelegate.CommonEventArgsDelegate">
            <summary>
            普通事件的委托
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:biovision.ihospital.uicommon.GeneralDelegate.CommonDelegate">
            <summary>
            普通的委托
            </summary>
        </member>
        <member name="T:biovision.ihospital.uicommon.GeneralDelegate.Action">
            <summary>
            泛型委托(.NET Framework 3.5以上版本自带，.NET Framework 2.0不支持，所以单独写出来)
            没有返回值，不带参数
            </summary>
        </member>
        <member name="T:biovision.ihospital.uicommon.GeneralDelegate.Action`1">
            <summary>
            泛型委托(.NET Framework 3.5以上版本自带，.NET Framework 2.0不支持，所以单独写出来)
            没有返回值，带1参数
            </summary>
            <typeparam name="T">参数的类型</typeparam>
            <param name="t1">参数值</param>
        </member>
        <member name="T:biovision.ihospital.uicommon.GeneralDelegate.Action`2">
            <summary>
            泛型委托(.NET Framework 3.5以上版本自带，.NET Framework 2.0不支持，所以单独写出来)
            没有返回值，带2参数
            </summary>
            <typeparam name="T1">第一个参数的类型</typeparam>
            <typeparam name="T2">第二个参数的类型</typeparam>
            <param name="t1">第一个参数值</param>
            <param name="t2">第二个参数值</param>
        </member>
        <member name="T:biovision.ihospital.uicommon.GeneralDelegate.Func`1">
            <summary>
            泛型委托(.NET Framework 3.5以上版本自带，.NET Framework 2.0不支持，所以单独写出来)
            有返回值，没有参数
            </summary>
            <typeparam name="TResult">返回值得类型</typeparam>
            <returns>返回值</returns>
        </member>
        <member name="T:biovision.ihospital.uicommon.GeneralDelegate.Func`2">
            <summary>
            泛型委托(.NET Framework 3.5以上版本自带，.NET Framework 2.0不支持，所以单独写出来)
            有返回值，有1个参数
            </summary>
            <typeparam name="TResult">返回值得类型</typeparam>
            <typeparam name="T">参数的类型</typeparam>
            <param name="t1">参数值</param>
            <returns>返回值</returns>
        </member>
        <member name="T:biovision.ihospital.uicommon.GeneralDelegate.Func`3">
            <summary>
            泛型委托(.NET Framework 3.5以上版本自带，.NET Framework 2.0不支持，所以单独写出来)
            有返回值，有2个参数
            </summary>
            <typeparam name="TResult">返回值得类型</typeparam>
            <typeparam name="T1">第一个参数的类型</typeparam>
            <typeparam name="T2">第二个参数的类型</typeparam>
            <param name="t1">第一个参数值</param>
            <param name="t2">第二个参数值</param>
            <returns>返回值</returns>
        </member>
        <member name="T:biovision.ihospital.uicommon.GeneralDelegate.Func`5">
            <summary>
            泛型委托(.NET Framework 3.5以上版本自带，.NET Framework 2.0不支持，所以单独写出来)
            有返回值，有2个参数
            </summary>
            <typeparam name="TResult">返回值得类型</typeparam>
            <typeparam name="T1">第一个参数的类型</typeparam>
            <typeparam name="T2">第二个参数的类型</typeparam>
             <typeparam name="T31">第3个参数的类型</typeparam>
            <typeparam name="T4">第4个参数的类型</typeparam>
            <param name="t1">第一个参数值</param>
            <param name="t2">第二个参数值</param>
            <typeparam name="t3">第3个参数的类型</typeparam>
            <typeparam name="t4">第4个参数的类型</typeparam>
            <returns>返回值</returns>
        </member>
        <member name="T:biovision.ihospital.uicommon.DBCommon">
            <remarks>
            Copyright (C), 2009-2009, BioVision Software. Co., Ltd.
            Author: 
            Version: Date:  
            Description:      　    封装数据库的公用操作：
                                    如：
                                    获取参数，建立数据库连接；
            　　　　　　　　　　　　连接关闭。
            Others:  
            Function List: 
            Change History: 
            1. Date:         20091028
               Author:       LiangV
               Modification: Design,Create
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.GetMySqlConnection">
            <remarks>
            Description: 　 读取配置参数，获取一个数据库连接（获取机制是新建一个还是复用连接， 先实现为 每次新建一个连接），所返回的Connection
                             已经Open。
                             但调用端需要显示地调用进行 连接释放， 本方法不负责连接释放。 
                                 执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:              
            Called By:       系统中所有需要获得数据库连接的地方， 避免每次编写重复的数据库连接代码。
            Table Accessed:  
            Table Updated:  
            Input:        
            Output:           MySQL.data.MySQLClient.MySQLConnection 
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.CloseConnection(MySql.Data.MySqlClient.MySqlConnection)">
            <remarks>
            Description: 　  关闭参数所指定数据库连接，提供一种统一的关闭方式，与调用端自主关闭功能一致。
                                执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:  
            Called By:        
            Table Accessed:  
            Table Updated:  
            Input:        
            Output:           System.Data.SqlConnection
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.ExecuteNonQuery(System.String)">
            <remarks>
            Description: 　  对于非查询的 数据库更新， 插入,删除操作，只需要调用端指定SQL字符串，然后调用本方法
                               本方法来完成SQLConnection，SqlCommand的建立，打开，和ExecuteNonQuery(sqlString)的操作。
                                调用端不需要显示地调用进行 连接释放， 本方法负责ExecuteNonQuery之后连接释放。
                                目前实现机制为，每次都新建Connection。如果调用端传入的 SQL语句有错误， 执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:  
            Called By:        
            Table Accessed:  
            Table Updated:  
            Input:        SQL 语句
            Output:        bool，执行失败返回FALSE
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.ExeuteDataTable(System.String)">
            <summary>
            本方法来完成SQLConnection，SqlCommand的建立，打开，和 ExeuteDataTable( )的操作，返回包含数据的datatable
            </summary>
            <param name="sqlString">查询字符串</param>
            <returns>返回<c>DataTable</c></returns>
            <remarks>
            Description: 　  对于非查询的 数据库查询操作，只需要调用端指定SQL字符串，然后调用本方法
                               本方法来完成SQLConnection，SqlCommand的建立，打开，和 ExeuteDataTable( )的操作，返回包含数据的datatable
                                目前实现机制为，每次都新建Connection。如果调用端传入的 SQL语句有错误， 执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:  
            Called By:        
            Table Accessed:  
            Table Updated:  
            Input:        SQL 语句
            Output:       返回datatable
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.ExeuteDataSet(System.String)">
            <summary>
            执行sql语句，返回数据集<c>DataSet</c>
            </summary>
            <param name="sqlString">查询字符串</param>
            <returns>数据集</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.ExecuteBlob(System.String)">
            <summary>
            读取单个blob文件
            </summary>
            <param name="sqlString">查询语句</param>
            <returns>返回字节数字</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.ExecuteBlob(System.String,System.String)">
            <summary>
            查询单个blob文件，并保存到文件
            </summary>
            <param name="sqlString"></param>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.ExecuteBlob(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            获取blob文件数组
            </summary>
            <param name="sqlString"></param>
            <param name="fields">需要得到的blob文件字段</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.GetMaxID(System.String,System.String)">
            <summary>
            得到最大值
            </summary>
            <param name="FieldName"></param>
            <param name="TableName"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.Exists(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="strSql"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.GetSingle(System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.ExecuteSqlTran(System.Collections.Generic.List{System.String})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.ExecuteSql(System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.ExecuteSqlInsertImg(System.String,System.Byte[])">
            <summary>
            向数据库里插入图像格式的字段(和上面情况类似的另一种实例)
            </summary>
            <param name="strSQL">SQL语句</param>
            <param name="fs">图像字节,数据库的字段类型为image的情况</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.ExecuteSql(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.ExecuteSqlTran(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的MySqlParameter[]）</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.ExecuteSqlTranWithIndentity(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的MySqlParameter[]）</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.GetSingle(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.Query(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.DBCommon.SetSqlConSaveConfig(System.String)">
            <summary>
             设置数据库服务器连接配置信息
            </summary>
            <param name="strConfig"> 数据库服务器配置信息</param>
        </member>
        <member name="T:uicommon.biovision.ihospital.uicommon.ExcelHelper">
            <summary>
            excel操作类，暂时仅支持写入功能 create by zyy 2015-07-28
            </summary>
        </member>
        <!-- 对于成员“M:uicommon.biovision.ihospital.uicommon.ExcelHelper.ExportAsExcel(System.Windows.Forms.ListView,System.String,System.String,System.String,System.String,System.String@)”忽略有格式错误的 XML 注释 -->
        <member name="F:biovision.ihospital.Controls.WordTip.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:biovision.ihospital.Controls.WordTip.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:biovision.ihospital.Controls.WordTip.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:biovision.ihospital.Controls.WordTip.WordListString">
            <summary>
            词库列表
            </summary>
        </member>
        <member name="F:biovision.ihospital.Controls.WordTip.BindRichTextBox">
            <summary>
            与改控件绑定的RichTextBox
            </summary>
        </member>
        <member name="M:biovision.ihospital.Controls.WordTip.SetBind(System.Collections.Generic.List{System.String},System.Windows.Forms.RichTextBox)">
            <summary>
            绑定
            </summary>
            <param name="wordListString"></param>
            <param name="bindRichTextBox"></param>
        </member>
        <member name="M:biovision.ihospital.Controls.WordTip.SetSelectText">
            <summary>
            设置选中文本
            </summary>
        </member>
        <member name="F:biovision.ihospital.Controls.WordTip.algontext">
            <summary>
            之前的文本
            </summary>
        </member>
        <member name="F:biovision.ihospital.Controls.WordTip.LimitTipString">
            <summary>
            限制弹出提示的字符串（比如，。等）
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.LoggerBiovision.GetConfigByName(System.String,System.String)">
            <summary>
            读取相对路径下的配置文件节点的内容
            </summary>
            <param name="nodeName">节点名称</param>
            <param name="relativeConfigFileName">相对文件名，格式如“\\config\\queuecall.config”</param>
            <returns>返回节点内容，如果节点不存在返回空字符串</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.LoggerBiovision.SetConfigByName(System.String,System.String,System.String)">
            <summary>
            保存相对路径下的文件配置
            </summary>
            <param name="nodeName">节点名称</param>
            <param name="value">值</param>
            <param name="relativeConfigFileName">相对当前目录的路径，格式如“\\config\\queuecall.config”</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.LoggerBiovision.LogException(System.Object,System.Exception,System.String)">
            <summary>
            实现错误日志机制
            写入信息包括：
            时间： YYYY-MM-DD HH:MM:SS:MMM
            程序写入的异常日志信息(由exception 捕捉方传入)： xxxxxxxxxx
            Exception信息： xxxxxxxxxxxxxxxxx
            调用堆栈信息： biovision.ihsopital.xxx.xxx.xxx() xxx行。
            </summary>
            <param name="sender">发送类</param>
            <param name="ex">异常信息</param>
            <param name="description">用户描述</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.LoggerBiovision.LogRunStatus(System.Object,System.String)">
            <summary>
            保存用户所做的操作
            </summary>
            <param name="sender">调用此方法的类，传递this</param>
            <param name="description">操作用户USERID，操作用户姓名： 所涉及的操作名称（用英文或者方法名表示），所涉及操作的类型（如新增，修改，删除等） 操作 所设计数据的 主要 的数据成员 如 FieldName:ID，名称，和日志记录模块写入的自定义运行状态信息。</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.LoggerBiovision.OutPut(System.String,System.String)">
            <summary>
            打印OutPut.txt，此方法作用是代替打印到控制台的功能
            </summary>
            <param name="paramName">参数名或其他表示参数的字符串</param>
            <param name="paramValue">参数值</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.LoggerBiovision.ClearOutPut">
            <summary>
            清空OutPut，每次运行主程序时都会清空
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.LabelPrint.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.LabelPrint.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.LabelPrint.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.LabelPrint.printDocument1_PrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            准备开始打印
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.LabelPrint.GetLength(System.String)">
            <summary>
            得到一个字符串的占位长度
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.LabelPrint.IsChineseLetter(System.String,System.Int32)">
            <summary>
            判断一个字符串中指定位置的字符是否是中文
            </summary>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:biovision.ihospital.uicommon.LabelPrint.GetEmptybyte(System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="F:uicommon.biovision.ihospital.Controls.MyListView.WM_LBUTTONDBLCLK">
            <summary>
            双击的编码
            </summary>
        </member>
        <member name="F:uicommon.biovision.ihospital.Controls.MyListView.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:uicommon.biovision.ihospital.Controls.MyListView.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:uicommon.biovision.ihospital.Controls.MyListView.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:biovision.ihospital.uicommon.jpg2dcmClass">
            <summary>
            jpg转dcm文件类，包函自动发送功能
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.jpg2dcmClass.GetExaminationPatientInfo(System.Int32)">
            <summary>
            根据检查ID  获取 此图片在数据库中的信息
            </summary>
            <param name="examinationID">检查ID</param>
            <returns>返回一个检查信息的字符串集合</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.jpg2dcmClass.jpg2dcmConvent(System.String,System.Int32)">
            <summary>
            将jpg图片转换成dcm图片，
            且根据配置文件和当前产品类型判断是否进行自动发送到默认的主机上。
            </summary>
            <param name="jpgFilePathName"></param>
            <param name="examinationID"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.jpg2dcmClass.ExeCommand(System.String)">
             
             执行cmd.exe命令
             
            命令文本
             命令输出文本
        </member>
        <member name="M:biovision.ihospital.uicommon.jpg2dcmClass.ExeCommand(System.String[])">
             
             执行多条cmd.exe命令
             
            命令文本数组
             命令输出文本
        </member>
        <member name="T:uicommon.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:uicommon.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:uicommon.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.CountdownMsgFrm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.CountdownMsgFrm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.CountdownMsgFrm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:biovision.ihospital.uicommon.XMLHelper">
            <summary>
            xml与ini文件的操作类
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            修改Ini文件的方法
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="val"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            读取Ini中的数据
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defVal"></param>
            <param name="retVal"></param>
            <param name="size"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.XmlRead(System.String,System.String,System.String)">
            <summary>
            XML读取
            </summary>
            <param name="path">路径</param>
            <param name="node">节点 请注意：这个节点必须是根节点一直写到本节点  比如:Mainset/Set/Open，不可以写成Open</param>
            <param name="attribute">属性名，非空时返回该属性值，否则返回串联值</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.XmlRead2(System.String,System.String)">
            <summary>
            这个方法适用于非表结构的元素的查找
            传入元素与路径，获取元素值
            </summary>
            <param name="nodeName">元素  格式：Open 不是Mainset/Set/Open这种格式</param>
            <param name="xmlPath">XML所在路径</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.GetConfigInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            使用方式1：适用于两层元素的表结构
            根据根元素、二级元素、属性、属性值，查找到该二级元素的属性值
            例:GetConfigInfo(strVideoPath,"GraphicCollectionSet","node", "shape","key","value")
            XML结构:
            ?xml version="1.0" encoding="utf-8"?
                configuration
                    GraphicCollectionSet
                        node key="shape" value="fullRect" /node
                    /GraphicCollectionSet
                /configuration
            </summary>
            <param name="xmlPath"></param>
            <param name="ElementnodeName">第一级目录的元素名</param>
            <param name="ChildNodeName">第二级目录的元素名</param>
            <param name="SelectattributeValue">作为条件的属性的属性值</param>
            <param name="Selectattribute">作为查询条件的属性</param>
            <param name="attributeValue">需要获取的属性的值</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.XmlUpdateInnerText(System.String,System.String,System.String)">
            <summary>
            根据元素名，修改相对应的元素的值(InnerText)
            这个只适用于:只有元素没有属性
            </summary>
            <param name="path">路径</param>
            <param name="node">因为要循环元素，请记住Node只能是例如：open而不能是 mainset/open这种格式</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.XmlUpdateInnerText2(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            根据元素名、属性名与属性值，修改相对应的元素值(InnerText)
            如果只有元素没有属性(attribute == "")，则效果与XmlUpdateInnerText方法一样。
            </summary>
            <param name="path">路径</param>
            <param name="node">元素名  因为要循环元素，请记住Node只能是例如：open而不能是:mainset/open这种格式</param>
            <param name="attribute">属性名 如果属性名不为空，则元素与属性名组合来查找，更精确</param>
            <param name="attributeValue">属性的值</param>
            <param name="Value">修改后的元素的值</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.XmlUpdateInnerText3(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            根据元素名，作为条件的属性名、作为条件的属性值，修改该元素下的另外一个属性的值
            </summary>
            例1：（两层才能找到属性的情况）：
            调用:XmlUpdateInnerText3(GlobalStaticData.strVideoSettingXmlPath, "GraphicCollectionSet","node", "key", "fill", "value", "1", "")
            ?xml version="1.0" encoding="utf-8"?
            configuration
                GraphicCollectionSet
                    node key="shape" value="fullRect" /
                    node key="fill" value="0" /
                /GraphicCollectionSet
            /configuration
            例2：(一层就能找到属性的情况):
            调用:XmlUpdateInnerText3(GlobalStaticData.strCallingListDataXmlPath, "CallListData","", "key", "fill", "value", "1", "")
            ?xml version="1.0" encoding="utf-8"?
            configuration
                CallListData name="-1" DateTimes="" QueueNumber="" PatientName="" ClinicNum="" Status="" AreEmergency=""  /CallListData
            /configuration
            <param name="path">路径</param>
            <param name="Elementnode">根元素的元素名 请记住Node只能是例如：open而不能是:mainset/open这种格式</param>
            <param name="node">元素名（如果xml数据有两层，这个需要填写），请记住Node只能是例如：open而不能是:mainset/open这种格式</param>
            <param name="Selectattribute">作为条件的属性值</param>
            <param name="SelectattributeValue">作为条件的属性名</param>
            <param name="Updateattribute">需要修改的属性的名字</param>
            <param name="UpdateattributeValue">需要修改的属性的值</param>
            <param name="Value">修改后元素的值 </param>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.XmlUpdateAttribute(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            根据节点属性、旧的元素名、元素值修改成新属性值
            </summary>
            <param name="path">路径</param>
            <param name="node">元素节点 请注意：因为要循环元素，请记住Node只能是例如：open而不能是:mainset/open这种格式</param>
            <param name="Attribute">元素名</param>
            <param name="OldattributeValue">旧的属性值 如果不知道修改前的属性值，请填写""</param>
            <param name="NewattributeValue">新的属性值</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.XmlAddInnerText(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            新增一个元素,本方法支持元素中带多个属性
            </summary>
            <param name="path">xml路径</param>
            <param name="node">元素节点， 请注意，该元素节点是从根节点一直到本节点的上一级节点，比如想创建3节点（2节点下），最外面有1根节点、1下面有2子节点，那么应该写为：1/2</param>
            <param name="InnerTextName">元素的名字</param>
            <param name="InnerTextValue">元素的值</param>
            <param name="AttributeName">string类型泛型：属性的名字（因为一个元素可以有多个属性，所以用泛型存储属性名与值）</param>
            <param name="AttributeValue">string类型泛型：属性的值</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.XmlIsHaveInnerText(System.String,System.String,System.String,System.String)">
            <summary>
            根据元素名与属性名查找相关的xml中是否有该属性，
            如果属性名为空，则只根据元素名查找是否有该属性，有则返回true,没有返回false
            </summary>
            <param name="path">路径</param>
            <param name="node">元素节点 该元素节点是节点名，不是main/open这种格式</param>
            <param name="AttributeName">属性名</param>
            <param name="AttributeValue">属性值</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.XmlIsHaveInnerText2(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            根据元素名与属性名查找相关的xml中是否有该属性值，属性值  属性值   属性值
            如果属性名为空，则只根据元素名查找是否有该属性值NodeValue，有则返回true,没有返回false
            </summary>
            <param name="path">路径</param>
            <param name="node">元素节点 该元素节点是节点名，不是main/open这种格式</param>
            <param name="NodeValue">属性值</param>
            <param name="AttributeName">属性名</param>
            <param name="AttributeValue">属性值</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.XmlRemoveChild(System.String,System.String,System.String,System.String)">
            <summary>
            根据元素、属性名、属性值 删除指定元素, 
            如果属性与属性值为空，则只根据元素删除指定元素
            </summary>
            <param name="path"></param>
            <param name="node">元素节点，由于是循环，所以node必须是元素节点名而不是这种mainset/open格式</param>
            <param name="AttributeName">属性名</param>
            <param name="AttributeValue">属性值</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.XmlRemoveAttribute(System.String,System.String,System.String,System.String)">
            <summary>
            根据元素、属性名、属性值 删除指定属性 (该方法未实现)
            </summary>
            <param name="path"></param>
            <param name="node">元素节点，由于是循环，所以node必须是元素节点名而不是这种mainset/open格式</param>
            <param name="AttributeName">属性名</param>
            <param name="AttributeValue">属性值</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.DeleteXmlDataSetRows(System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据DataTableName的名字，删除strColumn列中值为ColumnValue的行
            </summary>
            <param name="strXmlPath">xml相对路径</param>
            <param name="strColumn">列名</param>
            <param name="ColumnValue">根据列名，删除指定值的行</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.WriteXmlByDataSet(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            向Xml文件插入一行数据 (操作DataSet)
            </summary>
            <param name="strXmlPath">xml文件相对路径</param>
            <param name="Columns">要插入行的列名数组,如：string[] Columns = {"name","IsMarried"};</param>
            <param name="ColumnValue">要插入行每列的值数组,如：string[] ColumnValue={"kgdiwss","false"};</param>
            <returns>成功返回true,否则返回false</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.GetDataViewByXml(System.String,System.String,System.String,System.String)">
            <summary>
            读取Xml返回一个经排序或筛选后的DataView 
            </summary>
            <param name="strXmlPath"></param>
            <param name="strWhere">筛选条件，如："name = ＇kgdiwss＇"</param>
            <param name="DtName">Xml中datatable的名字</param>
            <param name="strSort">排序条件，如："Id desc"</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.XMLHelper.GetDataSetByXmlPath(System.String)">
            <summary>
            根据配置文件的路径，读取本地的配置并且返回DataSet
            </summary>
            <param name="xmlPath">xml配置的路径</param>
            <returns></returns>
        </member>
        <member name="T:biovision.ihospital.uicommon.Role">
            <summary>
            Copyright (C), 2009-2009, BioVision Software. Co., Ltd.
            File name: Role.cs
            Author: 
            Version: Date:  
            Description:   角色的ValueClass
            Others:  
            Function List: 
            Change History: 
            1. Date:         20091028
               Author:       LiangV
               Modification: Design,Create
            </summary>
        </member>
        <member name="P:biovision.ihospital.uicommon.Role.roleID">
            <summary>角色的数据库自增标识,全局唯一</summary>
        </member>
        <member name="P:biovision.ihospital.uicommon.Role.roleName">
            <summary>角色名称</summary>
        </member>
        <member name="P:biovision.ihospital.uicommon.Role.rolePrivileges">
            <summary>该角色所有权限</summary>
        </member>
        <member name="P:biovision.ihospital.uicommon.Role.rolePrivilegesID">
            <summary>该角色所有权限ID</summary>
        </member>
        <member name="T:biovision.ihospital.uicommon.GlobalStaticData">
            <summary>
            公用对象类
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.InitGlobalStaticData">
            <summary>
            初始化静态变量（一起初始化）
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.obj">
            <summary>
            公用的object对象
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.boo">
            <summary>
            公用bool对象
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.StrSql">
            <summary>
            公用sql语句的string变量
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strSqlConn">
            <summary>
            数据库的连接字符串
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strFileName">
            <summary>
            文件的名字
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strbuilder">
            <summary>
            公用可变字符串StringBuilder对象
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.dt">
            <summary>
            公用DataTable对象
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.ds">
            <summary>
            公用DataSet对象
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.listStr">
            <summary>
            公用string 类型的泛型
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.IntPublic">
            <summary>
            公用的int变量
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.G_ExamineType">
            <summary>
            当前系统运行所使用的检查类型
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.IsBeep">
            <summary>
            是否为蜂鸣器发声
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.userId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.username">
            <summary>
            用户姓名
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.IsInit">
            <summary>
            是否已经初始化过
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.roleID">
            <summary>
            角色ID
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.HashRolePrivilage">
            <summary>
            存放权限列表的哈希表  key代表权限ID，value代表权限名称
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData._backStageExaminationID">
            <summary>
            后台采集检查ID
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.BackStage">
            <summary>
            标志是否为后台采集
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData._CurrentExaminationID">
            <summary>
            正常采集检查ID
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData._DefaultMessageBoxDisplayDuration">
            <summary>
            弹出框停留时间
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData._ProductType">
            <summary>
            产品类型
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.booPauseCachingImages">
            <summary>
            是否暂停缓存DCM图像到本机。
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.fontSize">
            <summary>
            字体大小
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strStaticTempPatient_UID">
            <summary>
            静态变量-放射号(不确保会及时赋值、lxd的C++用到)
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.StaticExaminationID">
            <summary>
            这个适用于HIS接口小程序中记录ExaminationID变量
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.ProductModality">
            <summary>
            工作站所拥有的检查类型(用|符号隔开)
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.ReportSetFontSize">
            <summary>
            报告可以预设的字体集合
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.WhetherUpdatePatientInformation">
            <summary>
            是否修改了了病人信息，病人报告信息。
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.ReportFontSize">
            <summary>
            报告预览与报告打印中检查所见字体大小
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.RowSpacingSize">
            <summary>
            报告行间距大小
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.mut">
            <summary>
            互斥锁，用于线程间同步
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.staticSetImageType">
            <summary>
            设置工作站采集的图片的后缀，参考(大小写区分):.jpg,.bmp,.jpeg,.gif,.png,.ico,.tif
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.dockPanel">
            <summary>
            weifenluo布局变量
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.isRollBackLayout">
            <summary>
            是否回滚了布局的标识，用于防止回滚布局后关闭软件自动保存布局方法覆盖回滚后的布局文件
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strApplicationPath">
            <summary>
            当前工作站所在目录，不包括config文件夹
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strReportXmlPath">
            <summary>
            Report.xml的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strSqlSaverrecentlyInputCacheXmlPath">
            <summary>
            SqlSaverrecentlyInputCache.xml的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strVideoSettingXmlPath">
            <summary>
            VideoSetting.xml的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strPatientExmXmlPath">
            <summary>
            PatientExm.xml的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strMainSetXmlPath">
            <summary>
            MainSet.xml的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strSearchXmlPath">
            <summary>
            Search.xml的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.straldODBCSqlStringConfigXmlPath">
            <summary>
            aldODBCSqlStringConfig.xml的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strHISPACSSettingXmlPath">
            <summary>
            HISPACSSetting.xml的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strSCHEDULEDStationAetitleXmlPath">
            <summary>
            SCHEDULEDStationAetitle.xml的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strCallingListDataPath">
            <summary>
            CallingListData.xml路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strCache_SyncXmlPath">
            <summary>
            放射科缓存DCM图像到本机的相关配置文件
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strsystemINIPath">
            <summary>
            system.ini的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strprintersINIPath">
            <summary>
            printers.ini的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strWinSetCfgINIPath">
            <summary>
            WinSetCfg.ini的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strWINPYINIPath">
            <summary>
            WINPY.ini的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strstylesetINIPath">
            <summary>
            styleset.ini的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strstationsINIPath">
            <summary>
            stations.ini的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strRSConfigINIPath">
            <summary>
            RSConfig.ini的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strlicenseINIPath">
            <summary>
            license.ini的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strDBconfigINIPath">
            <summary>
            DBconfig.ini的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strqueuecallConfigPath">
            <summary>
            queuecall.config的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strihospitalConfigPath">
            <summary>
            ihospital.config的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strcallingListDataConfigPath">
            <summary>
            callingListData.config的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strcallingDataConfigPath">
            <summary>
            callingData.config的路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.strbackupConfigPath">
            <summary>
            backup.config的路径
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetTheCurrentDatabaseType(System.String)">
            <summary>
            Description:  根据传来的INI路径，读取DBConfig.ini中元素，获取当前数据库类型
            </summary>
            <param name="strINIPath">如果DBConfig.ini路径不存在，则</param>
            <returns></returns>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.PACSDatabaseType">
            <summary>
            PACS数据库类型
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.PacsDataBaseConnection">
            <summary>
            PACS数据库的连接字符串
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.IsBindEvent(System.Type,System.Windows.Forms.Control,System.String)">
            <summary>
            是否已经绑定了事件
            </summary>
            <param name="type">当前对象的Type（如：con.GetType()）</param>
            <param name="con">要判断的控件对象</param>
            <param name="eventName">要判断的事件名称</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetProductModality(System.String)">
            <summary> 
            获取工作站所拥有的检查类型
            </summary>
            <param name="ProductType">工作站类型</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.PauseCachingDcmImages(System.Boolean)">
            <summary>
            是否暂停缓存DCM图像到本机。
            </summary>
            <param name="booStopCachingImages"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetUserId">
            <summary>
            获取用户ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetUserId(System.Int32)">
            <summary>
            设置用户Name
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetUserName">
            <summary>
            获取用户ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetUserName(System.String)">
            <summary>
            设置用户Name
            </summary>
            <param name="UserName">用户名</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetRoleID(System.Int32)">
            <summary>
            设置用户角色ID
            </summary>
            <param name="RoleID">角ID</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetRoleID">
            <summary>
            获取角色ID
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetListRolePrivilage(System.Collections.Hashtable)">
            <summary>
            设置权限ID列表(key是int了性,value是string类型)
            </summary>
            <param name="hastable">哈希表</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetListRolePrivilage">
            <summary>
            获取权限列表(key是int了性,value是string类型)
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetImageCaptureBackStageModelOn(System.Int32)">
            <summary>
            设置后台采集检查ID
            </summary>
            <param name="examinationID">检查ID</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetImageCaptureNormalModelOn">
            <summary>
            设置当前采集状态为正常采集
            </summary>
            <param name="exID"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetImageCaptureModel">
            <summary>
            获取当前采集状态 true:前台采集、false:后台采集
            </summary> 
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetImageCaptureBackStageExaminationID">
            <summary>
            获取当前后台采集的检查编号
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetCurrentExaminationID">
            <summary>
            获取正常采集时的检查编号
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetCurrentExaminationID(System.Int32)">
            <summary>
            设置正常采集时的检查编号
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetFontSize">
            <summary>
            获取全局字体大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetDefaultTitle">
            <summary>
            获得工作站的默认标题
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetReportSeeandResultFontSize">
            <summary>
            得到检查所见与检查结论的字体大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetReportRowSpacingSize">
            <summary>
            获取报告行间距大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetFontSize(System.Int32)">
            <summary>
            设置全局字体大小
            </summary>
            <param name="fontsize"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetFontType">
            <summary>
            获取全局字体大小
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetProductType(System.String)">
            <summary>
            设置工作站类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetProductType">
            <summary>
            获取工作站类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetReportNeedCheck(System.Boolean)">
            <summary>
            设置报告是否需要审核  
            </summary>
            <param name="needCheck"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetReportNeedCheck">
            <summary>
            获取报告是否需要审核
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetFullWidthConvertedIntoSemiangle(System.String)">
            <summary>
            将全角转成半角
            </summary>
            <param name="input">需要转半角的字符串</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetLicenseini_UCkey(System.String)">
            <summary>
            根据工作站类型，修改licens的UC值
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetProductTypeValue(System.String)">
            <summary>
            由于LV生成的加密狗字符串不标准，所以需要将这些不标准的字符串整理成标准的工作站字符串
            </summary>
            <param name="strverificationProductType">加密狗字符串</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetLogo(System.String)">
            <summary>
            获取窗体的图标
            </summary>
            <param name="aProductType"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.PublicGetCurrentDateTime">
            <summary>
            得到服务器当前时间格式:yyyy-MM-dd HH:mm:ss
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.PublicGetUserName(System.Int32)">
            <summary>
            根据用户ID获取当前登录用户的姓名
            </summary>
            <param name="userID">用户ID</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.PublicGetRoleID(System.Int32)">
            <summary>
            根据用户ID，获取角色ID
            </summary>
            <param name="UserID">用户ID</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.PublicGetRolePrivilage(System.Int32)">
            <summary>
            根据角色ID,获取角色对应的所有权限编号
            </summary>
            <param name="roleID">角色ID</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.PublicGetNewImagePath(System.String)">
            <summary>
            读取system.ini根据元素SourcePath和NewPath，将指定字符串替换成新的字符串
            </summary>
            <param name="ImagePath">图片、视频路径</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.PublicGetPatientNum">
            <summary>
            生成病人编号，实际生成一串GUID唯一字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.PublicGetExaminationNum">
            <summary>
            生成检查编号(用于新建病人,生成规则 yyyyMM+dd+今天第N个病人，示例:20506260001)
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.PublicGetPatient_UID(System.String)">
            <summary>
            生成放射号，该方法会读取配置，判断是否自动生成放射号
            如果不自动生成放射号，则返回""
            </summary>
            <param name="StrexamineType">检查类型</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.PublicGetShortcutKey(System.String)">
            <summary>
            获取快捷键
            说明：传入一串快捷键字符串(例子:Ctrl+Alt+K)，经过解析，返回Keys
            说明：键与键用符号+分隔
            </summary>
            <param name="ShortCutKeys"></param>
            <returns></returns>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.iBackgroupColor_Red">
            <summary>
            配色Argb-red 
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.iBackgroupColor_Greed">
            <summary>
            配色Argb-greed
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.iBackgroupColor_Blue">
            <summary>
            配色Argb-blue
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetButton(System.Windows.Forms.Button@)">
            <summary>
            button初始化样式
            </summary>
            <param name="bt"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetButton(System.Windows.Forms.Button[])">
            <summary>
            button初始化样式
            </summary>
            <param name="bts"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetButton(System.Windows.Forms.Button)">
            <summary>
            button初始化样式
            </summary>
            <param name="bt"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetBackColor(System.Windows.Forms.Control)">
            <summary>
            设置控件的背景颜色
            </summary>
            <param name="c"></param>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.isDrawTabControlBackColor">
            <summary>
            是否要刷新控件的背景色
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.TabControl_DrawItem(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            词库，模板等选项页的标题绘制
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.TabControl_VisibleChanged(System.Object,System.EventArgs)">
            <summary>
            TabControl可视化发生改变时需要重绘
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.TabControl_SizeChanged(System.Object,System.EventArgs)">
            <summary>
            TabControl大小发生改变时需要重绘
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.TabControl_LocationChanged(System.Object,System.EventArgs)">
            <summary>
            TabControl位置发生改变时需要重绘
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.SetBackColor(System.Windows.Forms.Control[])">
            <summary>
            设置控件的背景颜色
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetChildControls(System.Windows.Forms.Control,System.Windows.Forms.Control,System.Int32)">
            <summary>
            获得控件下的指定子控件(警告：是所有子控件(包含子控件下的子控件))
            </summary>
            <param name="parent">父控件</param>
            <param name="control">指定控件的类型</param>
            <param name="depth">指定深度（-1为没有深度限制，子控件是1，子控件+子控件的子控件是2）</param>
            <returns>获取到的控件</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetChildControls``1(System.Windows.Forms.Control,System.Int32)">
            <summary>
            获得控件下的指定子控件(警告：是所有子控件（包含子控件下的子控件）)
            </summary>
            <typeparam name="T">控件的类型</typeparam>
            <param name="parent">父控件</param>
            <param name="depth">指定深度（-1为没有深度限制，子控件是1，子控件+子控件的子控件是2）</param>
            <returns>获取到的控件</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetChildControls``1(System.Windows.Forms.Control,System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            递归读取指定控件的子控件
            </summary>
            <param name="parent"></param>
            <param name="controlType"></param>
            <param name="cs"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.GetChildControls(System.Windows.Forms.Control,System.Windows.Forms.Control,System.Collections.Generic.List{System.Windows.Forms.Control},System.Int32)">
            <summary>
            递归读取指定控件的子控件
            </summary>
            <param name="parent"></param>
            <param name="controlType"></param>
            <param name="cs"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.AllButton_MouseEnter(System.Object,System.EventArgs)">
            <summary>
            鼠标进去button区域
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.AllButton_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            鼠标离开button区域
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.AllButton_MouseDown(System.Object,System.EventArgs)">
            <summary>
            button按下去
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:biovision.ihospital.uicommon.GlobalStaticData.AllButton_MouseUp(System.Object,System.EventArgs)">
            <summary>
            button松开
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:biovision.ihospital.uicommon.GlobalStaticData.IsFinishLoad">
            <summary>
            判断主窗体是否加载完毕
            </summary>
        </member>
        <member name="P:biovision.ihospital.uicommon.GlobalStaticData.DefaultMessageBoxDisplayDuration">
            <summary>
            弹出框的停留时间
            </summary>
        </member>
        <member name="T:biovision.ihospital.uicommon.OracleDBCommon">
            <remarks>
            Copyright (C), 2009-2009, BioVision Software. Co., Ltd.
            Author: 
            Version: Date:  
            Description:      　    封装数据库的公用操作：
                                    如：
                                    获取参数，建立数据库连接；
            　　　　　　　　　　　　连接关闭。
            Others:  
            Function List: 
            Change History: 
            1. Date:         20120821
               Author:       PengYongQing
               Modification: Design,Create
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.GetOracleConnection">
            <remarks>
            Description: 　 读取配置参数，获取一个数据库连接（获取机制是新建一个还是复用连接， 先实现为 每次新建一个连接），所返回的Connection
                             已经Open。
                             但调用端需要显示地调用进行 连接释放， 本方法不负责连接释放。 
                                 执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:              
            Called By:       系统中所有需要获得数据库连接的地方， 避免每次编写重复的数据库连接代码。
            Table Accessed:  
            Table Updated:  
            Input:        
            Output:          System.Data.OracleClient.OracleConnection
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.OracleCommit">
            <summary>
            Oracle数据库commit事务提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.CloseConnection(System.Data.OracleClient.OracleConnection)">
            <remarks>
            Description: 　  关闭参数所指定数据库连接，提供一种统一的关闭方式，与调用端自主关闭功能一致。
                                执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:  
            Called By:        
            Table Accessed:  
            Table Updated:  
            Input:        
            Output:           System.Data.OracleConnection
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.ExecuteNonQuery(System.String)">
            <remarks>
            Description: 　  对于非查询的 数据库更新， 插入,删除操作，只需要调用端指定SQL字符串，然后调用本方法
                               本方法来完成SQLConnection，SqlCommand的建立，打开，和ExecuteNonQuery(sqlString)的操作。
                                调用端不需要显示地调用进行 连接释放， 本方法负责ExecuteNonQuery之后连接释放。
                                目前实现机制为，每次都新建Connection。如果调用端传入的 SQL语句有错误， 执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:  
            Called By:        
            Table Accessed:  
            Table Updated:  
            Input:        SQL 语句
            Output:        bool，执行失败返回FALSE
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.ExeuteDataTable(System.String)">
            <summary>
            本方法来完成SQLConnection，SqlCommand的建立，打开，和 ExeuteDataTable( )的操作，返回包含数据的datatable
            </summary>
            <param name="sqlString">查询字符串</param>
            <returns>返回<c>DataTable</c></returns>
            <remarks>
            Description: 　  对于非查询的 数据库查询操作，只需要调用端指定SQL字符串，然后调用本方法
                               本方法来完成SQLConnection，SqlCommand的建立，打开，和 ExeuteDataTable( )的操作，返回包含数据的datatable
                                目前实现机制为，每次都新建Connection。如果调用端传入的 SQL语句有错误， 执行失败，则抛出相应的Exception，
                                附带Exception的错误信息
            Calls:  
            Called By:        
            Table Accessed:  
            Table Updated:  
            Input:        SQL 语句
            Output:       返回datatable
            </remarks>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.ExeuteDataSet(System.String)">
            <summary>
            执行sql语句，返回数据集<c>DataSet</c>
            </summary>
            <param name="sqlString">查询字符串</param>
            <returns>数据集</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.ExecuteBlob(System.String)">
            <summary>
            读取单个blob文件
            </summary>
            <param name="sqlString">查询语句</param>
            <returns>返回字节数字</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.ExecuteBlob(System.String,System.String)">
            <summary>
            查询单个blob文件，并保存到文件
            </summary>
            <param name="sqlString"></param>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.ExecuteBlob(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            获取blob文件数组
            </summary>
            <param name="sqlString"></param>
            <param name="fields">需要得到的blob文件字段</param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.GetMaxID(System.String,System.String)">
            <summary>
            得到最大值
            </summary>
            <param name="FieldName"></param>
            <param name="TableName"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.Exists(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="strSql"></param>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.GetSingle(System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.ExecuteSqlTran(System.Collections.Generic.List{System.String})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.ExecuteSql(System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.ExecuteSqlInsertImg(System.String,System.Byte[])">
            <summary>
            向数据库里插入图像格式的字段(和上面情况类似的另一种实例)
            </summary>
            <param name="strSQL">SQL语句</param>
            <param name="fs">图像字节,数据库的字段类型为image的情况</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.ExecuteSql(System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.ExecuteSqlTran(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.ExecuteSqlTranWithIndentity(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.GetSingle(System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.Query(System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.OracleDBCommon.SetSqlConSaveConfig(System.String)">
            <summary>
             设置数据库服务器连接配置信息
            </summary>
            <param name="strConfig"> 数据库服务器配置信息</param>
        </member>
        <member name="T:biovision.ihospital.uicommon.RoleHandler">
            <summary>
            Copyright (C), 2009-2009, BioVision Software. Co., Ltd.
            Author: 
            Version: Date:  
            Description:       新建角色
                               修改角色
                               删除角色
                               查询角色返回角色列表（安装检查类型）
                               获取一个角色的详细信息
                               
                                
            Others:  
            Function List: 
            Change History: 
            1. Date:         20091028
               Author:       LiangV
               Modification: Design,Create
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.RoleHandler.AddRole(biovision.ihospital.uicommon.Role)">
            <summary>
            Description: 　在数据库新增一个角色,
            Calls:  
            Called By:  
            Table Accessed: t_role,t_role_x_privilege
            Table Updated:  
            Input:         Role arg_role
            Output:
            </summary>
            <returns>int ,添加成功 返回 roleID,失败返回0</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.RoleHandler.UpdateRole(biovision.ihospital.uicommon.Role)">
            <summary>
            Description: 　在数据库修改一个角色的,
            Calls:  
            Called By:  
            Table Accessed: t_role ,t_role_x_privilege
            Table Updated:  
            Input:         Role arg_role
            Output:
            </summary>
            <returns>bool，修改成功返回TRUE,修改失败返回FALSE</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.RoleHandler.UpdateRole(System.String,System.Int32)">
            <summary>
            Description: 　在数据库修改一个角色的名称
            Calls:  
            Called By:  
            Table Accessed: t_role
            Table Updated:  
            Input:         string  roleName, int roleID
            Output:
            </summary>
            <returns>bool，修改成功返回TRUE,修改失败返回FALSE</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.RoleHandler.GetRole(System.Int32)">
            <summary>
            Description: 　在数据库获取一个角色Role实例,填充角色 的 Privilege LIst表,
            Calls:  
            Called By:  
            Table Accessed: t_role,t_role_x_privilege
            Table Updated:  
            Input:         int RoleID
            Output:
            </summary>
            <returns>Role,填充角色 的 Privilege List表,</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.RoleHandler.DeleteRole(System.Int32)">
            <summary>
            Description: 　在数据库删除一个角色, 根据roleID来删除，
                           如果删除的过程中判断该角色还有其他用户绑
                           定到此角色，则抛出RoleAssociateWithUsersException异常
            Calls:  
            Called By:  
            Table Accessed: t_role,t_role_x_privilege
            Table Updated:  
            Input:         int roleID
            Output:
            </summary>
            <returns>bool，成功返回true,失败返回False</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.RoleHandler.SearchRoleByExamineType(System.String)">
            <summary>
            Description: 　根据检查类型 查询角色列表
            Calls:  
            Called By:      每一种检查类型的 角色管理列表 显示 
            Table Accessed: t_role,t_role_x_privilege
            Table Updated:  
            Input:         string examineType
            Output:
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.RoleHandler.GetPrivilege(System.Collections.Hashtable)">
            <summary>
            Description: 　获取权限列表存放在 hbPrivilege 中 
            Calls:  
            Called By:  
            Table Accessed: t_privilege_static
            Table Updated:  
            Input:          Hashtable  hbPrivilege 
            Output:
            </summary>
            <returns></returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.RoleHandler.GetRoleList">
            <summary>
            Description: 　查询角色，获取角色列表
            Calls:  
            Called By:  
            Table Accessed: t_role
            Table Updated:  
            Input:          roleIlist;
            Output:
            </summary>
            <returns>      返回角色列表的集合</returns>
        </member>
        <member name="M:biovision.ihospital.uicommon.RoleHandler.GetLogRunStatusInfo(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            返回操作状态信息
            </summary>
            <param name="userID"> 用户编号</param>
            <param name="RelatedOperationName"> 操作描述</param>
            <param name="RelatedOperationType"> 操作类型（Delete,Search,Add,Modify）</param>
            <param name="ReportID">报告编号</param>
            <returns>状态信息格式： OperatorID： xx， 
                                    OperatorName： 张三， 
                                    RelatedOperationName： XXXX，
                                    RelatedOperationType： Delete / Search / Add /Modify， 
                                    RelatedData： yyyyMMddhhmmss，
                                    examinationID： xx，
                                    ReportID：xx，
            </returns>
        </member>
        <member name="T:biovision.ihospital.uicommon.EnumHandler">
            <summary>
            枚举
            </summary>
        </member>
        <member name="T:biovision.ihospital.uicommon.EnumHandler.ExaminationStatusEnum">
            <summary>
            检查状态枚举
            </summary>
        </member>
        <member name="T:biovision.ihospital.uicommon.EnumHandler.DefaultFillingFieldsRuleEnum">
            <summary>
            新建病人检查时， 默认的各个字段填充方式
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.EnumHandler.DefaultFillingFieldsRuleEnum.FillingWithDefault">
            <remarks>使用设定的默认值填充</remarks>
        </member>
        <member name="F:biovision.ihospital.uicommon.EnumHandler.DefaultFillingFieldsRuleEnum.FillingWithPrevious">
            <remarks>使用上一个病人的信息填充</remarks>
        </member>
        <member name="F:biovision.ihospital.uicommon.EnumHandler.DefaultFillingFieldsRuleEnum.FillingWithClear">
            <remarks>清空</remarks>
        </member>
        <member name="T:biovision.ihospital.uicommon.EnumHandler.InformationRetrievalListViewEnum">
            <summary>
            病人检索界面委托的相关枚举
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.EnumHandler.InformationRetrievalListViewEnum.Editor">
            <summary>
            编辑该病人报告
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.EnumHandler.InformationRetrievalListViewEnum.NotEditorAllowBrowsing">
            <summary>
            该报告被其他用户锁定
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.EnumHandler.InformationRetrievalListViewEnum.Search">
            <summary>
            查看该病人报告
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.EnumHandler.InformationRetrievalListViewEnum.VideoHistory">
            <summary>
            暂时无用
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.EnumHandler.InformationRetrievalListViewEnum.SetVideoModel">
            <summary>
            设置采图模式
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.EnumHandler.InformationRetrievalListViewEnum.AddReportContent">
            <summary>
            右键查看该报告内容
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.EnumHandler.InformationRetrievalListViewEnum.ShowHistoryInfo">
            <summary>
            显示历史记录
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.EnumHandler.InformationRetrievalListViewEnum.SETSEACH">
            <summary>
            加入当前阅片查看
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.EnumHandler.InformationRetrievalListViewEnum.Video">
            <summary>
            查看该病人检查影像
            </summary>
        </member>
        <member name="T:biovision.ihospital.uicommon.EnumHandler.PlaySoundByTypeEnum">
            <summary>
            播放音频路径
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.EnumHandler.PlaySoundByTypeEnum.CollectionImage">
            <summary>
            采图时播放的音乐
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.EnumHandler.PlaySoundByTypeEnum.BackgroundCollectionImage">
            <summary>
            后台采图时播放的音乐
            </summary>
        </member>
        <member name="F:biovision.ihospital.uicommon.EnumHandler.PlaySoundByTypeEnum.Video">
            <summary>
            录像时播放的音乐
            </summary>
        </member>
        <member name="T:biovision.ihospital.uicommon.Privilege">
            <summary>
            Copyright (C), 2009-2009, BioVision Software. Co., Ltd.
            File name: Role.cs
            Author: 
            Version: Date:  
            Description:   角色的ValueClass
            Others:  
            Function List: 
            Change History: 
            1. Date:         20091028
               Author:       LiangV
               Modification: Design,Create
            </summary>
        </member>
        <member name="P:biovision.ihospital.uicommon.Privilege.privilegeID">
            <summary>权限ID</summary>
        </member>
        <member name="P:biovision.ihospital.uicommon.Privilege.privilegeName">
            <summary>权限名称</summary>
        </member>
        <member name="P:biovision.ihospital.uicommon.Privilege.categoryName">
            <summary>权限类别</summary>
        </member>
        <member name="T:biovision.ihospital.uicommon.IAutoAdjustUIComponent">
            <summary>
            Copyright (C), 2009-2009, BioVision Software. Co., Ltd.　
            Author: 
            Version: Date:  
            Description: 　 抽象 一个在 界面某个区域中可以根据分配给其的 大小尺寸自动调整显示的 接口。
                            供每一个独立的 功能界面区域实现实体类。  
                            目的是适应 显示屏分辨率的不同变化。
                               
            Others:  
            Function List: 
            Change History: 
            1. Date:         20091028
               Author:       LiangV
               Modification: Design,Create
            </summary>
        </member>
        <member name="M:biovision.ihospital.uicommon.IAutoAdjustUIComponent.AdjustToFit">
            <summary>
            Description:  　　　根据当前的 坐标值, 自动调整本组件内部的 坐标位置和尺寸大小,来自动适应显示区域.
            Calls:  
            Called By:      每一个一个功能区域组件在不同的显示分辨率下的显示自动适应调整 Table Updated:  
            Input:     
            Output:
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:biovision.ihospital.uicommon.IAutoAdjustUIComponent.leftTop">
            <summary>本组件的左上坐标,以程序客户区坐标为原点</summary>
        </member>
        <member name="P:biovision.ihospital.uicommon.IAutoAdjustUIComponent.rightBottom">
            <summary>本组件的右下坐标,以程序客户区坐标为原点</summary>
        </member>
    </members>
</doc>
